{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"component\", \"columnSpan\", \"defaultHeight\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { createUnarySpacing, getValue, handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport { styled, useThemeProps, useTheme } from '@mui/material/styles';\nimport { getMasonryItemUtilityClass } from './masonryItemClasses';\nimport MasonryContext from '../Masonry/MasonryContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getMasonryItemUtilityClass, classes);\n};\n\nexport const style = ({\n  ownerState,\n  theme\n}) => {\n  let styles = {\n    width: '100%',\n    '& > *': _extends({\n      // all contents should have a width of 100%\n      width: '100%',\n      boxSizing: 'inherit'\n    }, ownerState.hasDefaultHeight && {\n      height: '100%'\n    }),\n    visibility: ownerState.height ? 'visible' : 'hidden',\n    gridColumnEnd: `span ${ownerState.columnSpan}`,\n    boxSizing: 'inherit'\n  };\n\n  if (Array.isArray(ownerState.spacing) || typeof ownerState.spacing === 'object') {\n    const base = {};\n    Object.keys(theme.breakpoints.values).forEach(breakpoint => {\n      if (ownerState.spacing[breakpoint] != null) {\n        base[breakpoint] = true;\n      }\n    });\n    const spacingValues = resolveBreakpointValues({\n      values: ownerState.spacing,\n      base\n    });\n    const transformer = createUnarySpacing(theme);\n\n    const styleFromPropValue = propValue => {\n      const gap = ownerState.height ? Number(getValue(transformer, propValue).replace('px', '')) : 0; // For lazy-loaded images to load properly, masonry item should take up space greater than 1px.\n      // Taking into account a row gap of 2px, rowSpan should at least be 2.\n\n      const rowSpan = ownerState.height ? Math.ceil((ownerState.height + gap) / 2) : 2;\n      return {\n        gridRowEnd: `span ${rowSpan}`,\n        paddingBottom: gap === 0 ? 0 : gap - 2\n      };\n    };\n\n    styles = _extends({}, styles, handleBreakpoints({\n      theme\n    }, spacingValues, styleFromPropValue));\n  }\n\n  return styles;\n};\nconst MasonryItemRoot = styled('div', {\n  name: 'MuiMasonryItem',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    return [styles.root];\n  }\n})(style);\nconst MasonryItem = /*#__PURE__*/React.forwardRef(function MasonryItem(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiMasonryItem'\n  });\n  const masonryItemRef = React.useRef(null);\n  const {\n    spacing = 1\n  } = React.useContext(MasonryContext);\n\n  const {\n    children,\n    className,\n    component = 'div',\n    columnSpan = 1,\n    defaultHeight\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const hasDefaultHeight = defaultHeight !== undefined;\n  const [height, setHeight] = React.useState(defaultHeight);\n\n  const ownerState = _extends({}, props, {\n    spacing,\n    hasDefaultHeight,\n    columnSpan,\n    height: height < 0 ? 0 : height // MasonryItems to which negative or zero height is passed will be hidden\n\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  React.useEffect(() => {\n    // Do not create a resize observer in case of provided height masonry\n    if (hasDefaultHeight) {\n      return undefined;\n    }\n\n    if (typeof ResizeObserver === 'undefined') {\n      return undefined;\n    }\n\n    const resizeObserver = new ResizeObserver(([item]) => {\n      setHeight(item.contentRect.height);\n    });\n    resizeObserver.observe(masonryItemRef.current.firstChild);\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [hasDefaultHeight]);\n  const handleRef = useForkRef(ref, masonryItemRef);\n  const theme = useTheme();\n  const styleProp = {};\n\n  if (!Array.isArray(spacing) && typeof spacing !== 'object') {\n    const gap = height ? Number(theme.spacing(spacing).replace('px', '')) : 0;\n    const rowSpan = height ? Math.ceil((height + gap) / 2) : 2;\n    styleProp.gridRowEnd = `span ${rowSpan}`;\n    styleProp.paddingBottom = gap === 0 ? 0 : gap - 2;\n  }\n\n  return /*#__PURE__*/_jsx(MasonryItemRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ref: handleRef,\n    ownerState: ownerState,\n    style: styleProp\n  }, other, {\n    children: React.Children.only(children)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MasonryItem.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally an `<img />` or a `<div />`. It should be only one element.\n   */\n  children: PropTypes.element.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The number of columns taken up by the component\n   * @default 1\n   */\n  columnSpan: PropTypes.number,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The initial height of the component in px. This is provided for server-side rendering.\n   */\n  defaultHeight: PropTypes.number,\n\n  /**\n   * Allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object\n} : void 0;\nexport default MasonryItem;","map":{"version":3,"sources":["/Users/santoshsingh/Documents/WebDevelopment/ecom-app/node_modules/@mui/lab/MasonryItem/MasonryItem.js"],"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","PropTypes","clsx","createUnarySpacing","getValue","handleBreakpoints","unstable_resolveBreakpointValues","resolveBreakpointValues","unstable_useForkRef","useForkRef","unstable_composeClasses","composeClasses","styled","useThemeProps","useTheme","getMasonryItemUtilityClass","MasonryContext","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","style","theme","styles","width","boxSizing","hasDefaultHeight","height","visibility","gridColumnEnd","columnSpan","Array","isArray","spacing","base","Object","keys","breakpoints","values","forEach","breakpoint","spacingValues","transformer","styleFromPropValue","propValue","gap","Number","replace","rowSpan","Math","ceil","gridRowEnd","paddingBottom","MasonryItemRoot","name","slot","overridesResolver","props","MasonryItem","forwardRef","inProps","ref","masonryItemRef","useRef","useContext","children","className","component","defaultHeight","other","undefined","setHeight","useState","useEffect","ResizeObserver","resizeObserver","item","contentRect","observe","current","firstChild","disconnect","handleRef","styleProp","as","Children","only","process","env","NODE_ENV","propTypes","element","isRequired","object","string","number","elementType","sx"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"component\", \"columnSpan\", \"defaultHeight\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { createUnarySpacing, getValue, handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport { styled, useThemeProps, useTheme } from '@mui/material/styles';\nimport { getMasonryItemUtilityClass } from './masonryItemClasses';\nimport MasonryContext from '../Masonry/MasonryContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getMasonryItemUtilityClass, classes);\n};\n\nexport const style = ({\n  ownerState,\n  theme\n}) => {\n  let styles = {\n    width: '100%',\n    '& > *': _extends({\n      // all contents should have a width of 100%\n      width: '100%',\n      boxSizing: 'inherit'\n    }, ownerState.hasDefaultHeight && {\n      height: '100%'\n    }),\n    visibility: ownerState.height ? 'visible' : 'hidden',\n    gridColumnEnd: `span ${ownerState.columnSpan}`,\n    boxSizing: 'inherit'\n  };\n\n  if (Array.isArray(ownerState.spacing) || typeof ownerState.spacing === 'object') {\n    const base = {};\n    Object.keys(theme.breakpoints.values).forEach(breakpoint => {\n      if (ownerState.spacing[breakpoint] != null) {\n        base[breakpoint] = true;\n      }\n    });\n    const spacingValues = resolveBreakpointValues({\n      values: ownerState.spacing,\n      base\n    });\n    const transformer = createUnarySpacing(theme);\n\n    const styleFromPropValue = propValue => {\n      const gap = ownerState.height ? Number(getValue(transformer, propValue).replace('px', '')) : 0; // For lazy-loaded images to load properly, masonry item should take up space greater than 1px.\n      // Taking into account a row gap of 2px, rowSpan should at least be 2.\n\n      const rowSpan = ownerState.height ? Math.ceil((ownerState.height + gap) / 2) : 2;\n      return {\n        gridRowEnd: `span ${rowSpan}`,\n        paddingBottom: gap === 0 ? 0 : gap - 2\n      };\n    };\n\n    styles = _extends({}, styles, handleBreakpoints({\n      theme\n    }, spacingValues, styleFromPropValue));\n  }\n\n  return styles;\n};\nconst MasonryItemRoot = styled('div', {\n  name: 'MuiMasonryItem',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    return [styles.root];\n  }\n})(style);\nconst MasonryItem = /*#__PURE__*/React.forwardRef(function MasonryItem(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiMasonryItem'\n  });\n  const masonryItemRef = React.useRef(null);\n  const {\n    spacing = 1\n  } = React.useContext(MasonryContext);\n\n  const {\n    children,\n    className,\n    component = 'div',\n    columnSpan = 1,\n    defaultHeight\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const hasDefaultHeight = defaultHeight !== undefined;\n  const [height, setHeight] = React.useState(defaultHeight);\n\n  const ownerState = _extends({}, props, {\n    spacing,\n    hasDefaultHeight,\n    columnSpan,\n    height: height < 0 ? 0 : height // MasonryItems to which negative or zero height is passed will be hidden\n\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  React.useEffect(() => {\n    // Do not create a resize observer in case of provided height masonry\n    if (hasDefaultHeight) {\n      return undefined;\n    }\n\n    if (typeof ResizeObserver === 'undefined') {\n      return undefined;\n    }\n\n    const resizeObserver = new ResizeObserver(([item]) => {\n      setHeight(item.contentRect.height);\n    });\n    resizeObserver.observe(masonryItemRef.current.firstChild);\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [hasDefaultHeight]);\n  const handleRef = useForkRef(ref, masonryItemRef);\n  const theme = useTheme();\n  const styleProp = {};\n\n  if (!Array.isArray(spacing) && typeof spacing !== 'object') {\n    const gap = height ? Number(theme.spacing(spacing).replace('px', '')) : 0;\n    const rowSpan = height ? Math.ceil((height + gap) / 2) : 2;\n    styleProp.gridRowEnd = `span ${rowSpan}`;\n    styleProp.paddingBottom = gap === 0 ? 0 : gap - 2;\n  }\n\n  return /*#__PURE__*/_jsx(MasonryItemRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ref: handleRef,\n    ownerState: ownerState,\n    style: styleProp\n  }, other, {\n    children: React.Children.only(children)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MasonryItem.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally an `<img />` or a `<div />`. It should be only one element.\n   */\n  children: PropTypes.element.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The number of columns taken up by the component\n   * @default 1\n   */\n  columnSpan: PropTypes.number,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The initial height of the component in px. This is provided for server-side rendering.\n   */\n  defaultHeight: PropTypes.number,\n\n  /**\n   * Allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object\n} : void 0;\nexport default MasonryItem;"]},"metadata":{},"sourceType":"module"}