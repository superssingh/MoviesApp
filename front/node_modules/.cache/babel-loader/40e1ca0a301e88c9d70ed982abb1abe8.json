{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { normalizeKey } from '@material/dom/keyboard';\nimport { cssClasses, numbers, strings } from './constants';\nimport { preventDefaultEvent } from './events';\nimport * as typeahead from './typeahead';\n\nfunction isNumberArray(selectedIndex) {\n  return selectedIndex instanceof Array;\n}\n\nvar MDCListFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCListFoundation, _super);\n\n  function MDCListFoundation(adapter) {\n    var _this = _super.call(this, __assign(__assign({}, MDCListFoundation.defaultAdapter), adapter)) || this;\n\n    _this.wrapFocus = false;\n    _this.isVertical = true;\n    _this.isSingleSelectionList = false;\n    _this.selectedIndex = numbers.UNSET_INDEX;\n    _this.focusedItemIndex = numbers.UNSET_INDEX;\n    _this.useActivatedClass = false;\n    _this.useSelectedAttr = false;\n    _this.ariaCurrentAttrValue = null;\n    _this.isCheckboxList = false;\n    _this.isRadioList = false;\n    _this.hasTypeahead = false; // Transiently holds current typeahead prefix from user.\n\n    _this.typeaheadState = typeahead.initState();\n    _this.sortedIndexByFirstChar = new Map();\n    return _this;\n  }\n\n  Object.defineProperty(MDCListFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCListFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCListFoundation, \"numbers\", {\n    get: function () {\n      return numbers;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCListFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        addClassForElementIndex: function () {\n          return undefined;\n        },\n        focusItemAtIndex: function () {\n          return undefined;\n        },\n        getAttributeForElementIndex: function () {\n          return null;\n        },\n        getFocusedElementIndex: function () {\n          return 0;\n        },\n        getListItemCount: function () {\n          return 0;\n        },\n        hasCheckboxAtIndex: function () {\n          return false;\n        },\n        hasRadioAtIndex: function () {\n          return false;\n        },\n        isCheckboxCheckedAtIndex: function () {\n          return false;\n        },\n        isFocusInsideList: function () {\n          return false;\n        },\n        isRootFocused: function () {\n          return false;\n        },\n        listItemAtIndexHasClass: function () {\n          return false;\n        },\n        notifyAction: function () {\n          return undefined;\n        },\n        removeClassForElementIndex: function () {\n          return undefined;\n        },\n        setAttributeForElementIndex: function () {\n          return undefined;\n        },\n        setCheckedCheckboxOrRadioAtIndex: function () {\n          return undefined;\n        },\n        setTabIndexForListItemChildren: function () {\n          return undefined;\n        },\n        getPrimaryTextAtIndex: function () {\n          return '';\n        }\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MDCListFoundation.prototype.layout = function () {\n    if (this.adapter.getListItemCount() === 0) {\n      return;\n    } // TODO(b/172274142): consider all items when determining the list's type.\n\n\n    if (this.adapter.hasCheckboxAtIndex(0)) {\n      this.isCheckboxList = true;\n    } else if (this.adapter.hasRadioAtIndex(0)) {\n      this.isRadioList = true;\n    } else {\n      this.maybeInitializeSingleSelection();\n    }\n\n    if (this.hasTypeahead) {\n      this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();\n    }\n  };\n  /** Returns the index of the item that was last focused. */\n\n\n  MDCListFoundation.prototype.getFocusedItemIndex = function () {\n    return this.focusedItemIndex;\n  };\n  /** Toggles focus wrapping with keyboard navigation. */\n\n\n  MDCListFoundation.prototype.setWrapFocus = function (value) {\n    this.wrapFocus = value;\n  };\n  /**\n   * Toggles orientation direction for keyboard navigation (true for vertical,\n   * false for horizontal).\n   */\n\n\n  MDCListFoundation.prototype.setVerticalOrientation = function (value) {\n    this.isVertical = value;\n  };\n  /** Toggles single-selection behavior. */\n\n\n  MDCListFoundation.prototype.setSingleSelection = function (value) {\n    this.isSingleSelectionList = value;\n\n    if (value) {\n      this.maybeInitializeSingleSelection();\n      this.selectedIndex = this.getSelectedIndexFromDOM();\n    }\n  };\n  /**\n   * Automatically determines whether the list is single selection list. If so,\n   * initializes the internal state to match the selected item.\n   */\n\n\n  MDCListFoundation.prototype.maybeInitializeSingleSelection = function () {\n    var selectedItemIndex = this.getSelectedIndexFromDOM();\n    if (selectedItemIndex === numbers.UNSET_INDEX) return;\n    var hasActivatedClass = this.adapter.listItemAtIndexHasClass(selectedItemIndex, cssClasses.LIST_ITEM_ACTIVATED_CLASS);\n\n    if (hasActivatedClass) {\n      this.setUseActivatedClass(true);\n    }\n\n    this.isSingleSelectionList = true;\n    this.selectedIndex = selectedItemIndex;\n  };\n  /** @return Index of the first selected item based on the DOM state. */\n\n\n  MDCListFoundation.prototype.getSelectedIndexFromDOM = function () {\n    var selectedIndex = numbers.UNSET_INDEX;\n    var listItemsCount = this.adapter.getListItemCount();\n\n    for (var i = 0; i < listItemsCount; i++) {\n      var hasSelectedClass = this.adapter.listItemAtIndexHasClass(i, cssClasses.LIST_ITEM_SELECTED_CLASS);\n      var hasActivatedClass = this.adapter.listItemAtIndexHasClass(i, cssClasses.LIST_ITEM_ACTIVATED_CLASS);\n\n      if (!(hasSelectedClass || hasActivatedClass)) {\n        continue;\n      }\n\n      selectedIndex = i;\n      break;\n    }\n\n    return selectedIndex;\n  };\n  /**\n   * Sets whether typeahead is enabled on the list.\n   * @param hasTypeahead Whether typeahead is enabled.\n   */\n\n\n  MDCListFoundation.prototype.setHasTypeahead = function (hasTypeahead) {\n    this.hasTypeahead = hasTypeahead;\n\n    if (hasTypeahead) {\n      this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();\n    }\n  };\n  /**\n   * @return Whether typeahead is currently matching a user-specified prefix.\n   */\n\n\n  MDCListFoundation.prototype.isTypeaheadInProgress = function () {\n    return this.hasTypeahead && typeahead.isTypingInProgress(this.typeaheadState);\n  };\n  /** Toggle use of the \"activated\" CSS class. */\n\n\n  MDCListFoundation.prototype.setUseActivatedClass = function (useActivated) {\n    this.useActivatedClass = useActivated;\n  };\n  /**\n   * Toggles use of the selected attribute (true for aria-selected, false for\n   * aria-checked).\n   */\n\n\n  MDCListFoundation.prototype.setUseSelectedAttribute = function (useSelected) {\n    this.useSelectedAttr = useSelected;\n  };\n\n  MDCListFoundation.prototype.getSelectedIndex = function () {\n    return this.selectedIndex;\n  };\n\n  MDCListFoundation.prototype.setSelectedIndex = function (index, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        forceUpdate = _b.forceUpdate;\n\n    if (!this.isIndexValid(index)) {\n      return;\n    }\n\n    if (this.isCheckboxList) {\n      this.setCheckboxAtIndex(index);\n    } else if (this.isRadioList) {\n      this.setRadioAtIndex(index);\n    } else {\n      this.setSingleSelectionAtIndex(index, {\n        forceUpdate: forceUpdate\n      });\n    }\n  };\n  /**\n   * Focus in handler for the list items.\n   */\n\n\n  MDCListFoundation.prototype.handleFocusIn = function (listItemIndex) {\n    if (listItemIndex >= 0) {\n      this.focusedItemIndex = listItemIndex;\n      this.adapter.setAttributeForElementIndex(listItemIndex, 'tabindex', '0');\n      this.adapter.setTabIndexForListItemChildren(listItemIndex, '0');\n    }\n  };\n  /**\n   * Focus out handler for the list items.\n   */\n\n\n  MDCListFoundation.prototype.handleFocusOut = function (listItemIndex) {\n    var _this = this;\n\n    if (listItemIndex >= 0) {\n      this.adapter.setAttributeForElementIndex(listItemIndex, 'tabindex', '-1');\n      this.adapter.setTabIndexForListItemChildren(listItemIndex, '-1');\n    }\n    /**\n     * Between Focusout & Focusin some browsers do not have focus on any\n     * element. Setting a delay to wait till the focus is moved to next element.\n     */\n\n\n    setTimeout(function () {\n      if (!_this.adapter.isFocusInsideList()) {\n        _this.setTabindexToFirstSelectedOrFocusedItem();\n      }\n    }, 0);\n  };\n  /**\n   * Key handler for the list.\n   */\n\n\n  MDCListFoundation.prototype.handleKeydown = function (event, isRootListItem, listItemIndex) {\n    var _this = this;\n\n    var isArrowLeft = normalizeKey(event) === 'ArrowLeft';\n    var isArrowUp = normalizeKey(event) === 'ArrowUp';\n    var isArrowRight = normalizeKey(event) === 'ArrowRight';\n    var isArrowDown = normalizeKey(event) === 'ArrowDown';\n    var isHome = normalizeKey(event) === 'Home';\n    var isEnd = normalizeKey(event) === 'End';\n    var isEnter = normalizeKey(event) === 'Enter';\n    var isSpace = normalizeKey(event) === 'Spacebar'; // Have to check both upper and lower case, because having caps lock on\n    // affects the value.\n\n    var isLetterA = event.key === 'A' || event.key === 'a';\n\n    if (this.adapter.isRootFocused()) {\n      if (isArrowUp || isEnd) {\n        event.preventDefault();\n        this.focusLastElement();\n      } else if (isArrowDown || isHome) {\n        event.preventDefault();\n        this.focusFirstElement();\n      }\n\n      if (this.hasTypeahead) {\n        var handleKeydownOpts = {\n          event: event,\n          focusItemAtIndex: function (index) {\n            _this.focusItemAtIndex(index);\n          },\n          focusedItemIndex: -1,\n          isTargetListItem: isRootListItem,\n          sortedIndexByFirstChar: this.sortedIndexByFirstChar,\n          isItemAtIndexDisabled: function (index) {\n            return _this.adapter.listItemAtIndexHasClass(index, cssClasses.LIST_ITEM_DISABLED_CLASS);\n          }\n        };\n        typeahead.handleKeydown(handleKeydownOpts, this.typeaheadState);\n      }\n\n      return;\n    }\n\n    var currentIndex = this.adapter.getFocusedElementIndex();\n\n    if (currentIndex === -1) {\n      currentIndex = listItemIndex;\n\n      if (currentIndex < 0) {\n        // If this event doesn't have a mdc-list-item ancestor from the\n        // current list (not from a sublist), return early.\n        return;\n      }\n    }\n\n    if (this.isVertical && isArrowDown || !this.isVertical && isArrowRight) {\n      preventDefaultEvent(event);\n      this.focusNextElement(currentIndex);\n    } else if (this.isVertical && isArrowUp || !this.isVertical && isArrowLeft) {\n      preventDefaultEvent(event);\n      this.focusPrevElement(currentIndex);\n    } else if (isHome) {\n      preventDefaultEvent(event);\n      this.focusFirstElement();\n    } else if (isEnd) {\n      preventDefaultEvent(event);\n      this.focusLastElement();\n    } else if (isLetterA && event.ctrlKey && this.isCheckboxList) {\n      event.preventDefault();\n      this.toggleAll(this.selectedIndex === numbers.UNSET_INDEX ? [] : this.selectedIndex);\n    } else if (isEnter || isSpace) {\n      if (isRootListItem) {\n        // Return early if enter key is pressed on anchor element which triggers\n        // synthetic MouseEvent event.\n        var target = event.target;\n\n        if (target && target.tagName === 'A' && isEnter) {\n          return;\n        }\n\n        preventDefaultEvent(event);\n\n        if (this.adapter.listItemAtIndexHasClass(currentIndex, cssClasses.LIST_ITEM_DISABLED_CLASS)) {\n          return;\n        }\n\n        if (!this.isTypeaheadInProgress()) {\n          if (this.isSelectableList()) {\n            this.setSelectedIndexOnAction(currentIndex);\n          }\n\n          this.adapter.notifyAction(currentIndex);\n        }\n      }\n    }\n\n    if (this.hasTypeahead) {\n      var handleKeydownOpts = {\n        event: event,\n        focusItemAtIndex: function (index) {\n          _this.focusItemAtIndex(index);\n        },\n        focusedItemIndex: this.focusedItemIndex,\n        isTargetListItem: isRootListItem,\n        sortedIndexByFirstChar: this.sortedIndexByFirstChar,\n        isItemAtIndexDisabled: function (index) {\n          return _this.adapter.listItemAtIndexHasClass(index, cssClasses.LIST_ITEM_DISABLED_CLASS);\n        }\n      };\n      typeahead.handleKeydown(handleKeydownOpts, this.typeaheadState);\n    }\n  };\n  /**\n   * Click handler for the list.\n   */\n\n\n  MDCListFoundation.prototype.handleClick = function (index, toggleCheckbox) {\n    if (index === numbers.UNSET_INDEX) {\n      return;\n    }\n\n    if (this.adapter.listItemAtIndexHasClass(index, cssClasses.LIST_ITEM_DISABLED_CLASS)) {\n      return;\n    }\n\n    if (this.isSelectableList()) {\n      this.setSelectedIndexOnAction(index, toggleCheckbox);\n    }\n\n    this.adapter.notifyAction(index);\n  };\n  /**\n   * Focuses the next element on the list.\n   */\n\n\n  MDCListFoundation.prototype.focusNextElement = function (index) {\n    var count = this.adapter.getListItemCount();\n    var nextIndex = index + 1;\n\n    if (nextIndex >= count) {\n      if (this.wrapFocus) {\n        nextIndex = 0;\n      } else {\n        // Return early because last item is already focused.\n        return index;\n      }\n    }\n\n    this.focusItemAtIndex(nextIndex);\n    return nextIndex;\n  };\n  /**\n   * Focuses the previous element on the list.\n   */\n\n\n  MDCListFoundation.prototype.focusPrevElement = function (index) {\n    var prevIndex = index - 1;\n\n    if (prevIndex < 0) {\n      if (this.wrapFocus) {\n        prevIndex = this.adapter.getListItemCount() - 1;\n      } else {\n        // Return early because first item is already focused.\n        return index;\n      }\n    }\n\n    this.focusItemAtIndex(prevIndex);\n    return prevIndex;\n  };\n\n  MDCListFoundation.prototype.focusFirstElement = function () {\n    this.focusItemAtIndex(0);\n    return 0;\n  };\n\n  MDCListFoundation.prototype.focusLastElement = function () {\n    var lastIndex = this.adapter.getListItemCount() - 1;\n    this.focusItemAtIndex(lastIndex);\n    return lastIndex;\n  };\n\n  MDCListFoundation.prototype.focusInitialElement = function () {\n    var initialIndex = this.getFirstSelectedOrFocusedItemIndex();\n    this.focusItemAtIndex(initialIndex);\n    return initialIndex;\n  };\n  /**\n   * @param itemIndex Index of the list item\n   * @param isEnabled Sets the list item to enabled or disabled.\n   */\n\n\n  MDCListFoundation.prototype.setEnabled = function (itemIndex, isEnabled) {\n    if (!this.isIndexValid(itemIndex)) {\n      return;\n    }\n\n    if (isEnabled) {\n      this.adapter.removeClassForElementIndex(itemIndex, cssClasses.LIST_ITEM_DISABLED_CLASS);\n      this.adapter.setAttributeForElementIndex(itemIndex, strings.ARIA_DISABLED, 'false');\n    } else {\n      this.adapter.addClassForElementIndex(itemIndex, cssClasses.LIST_ITEM_DISABLED_CLASS);\n      this.adapter.setAttributeForElementIndex(itemIndex, strings.ARIA_DISABLED, 'true');\n    }\n  };\n\n  MDCListFoundation.prototype.setSingleSelectionAtIndex = function (index, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        forceUpdate = _b.forceUpdate;\n\n    if (this.selectedIndex === index && !forceUpdate) {\n      return;\n    }\n\n    var selectedClassName = cssClasses.LIST_ITEM_SELECTED_CLASS;\n\n    if (this.useActivatedClass) {\n      selectedClassName = cssClasses.LIST_ITEM_ACTIVATED_CLASS;\n    }\n\n    if (this.selectedIndex !== numbers.UNSET_INDEX) {\n      this.adapter.removeClassForElementIndex(this.selectedIndex, selectedClassName);\n    }\n\n    this.setAriaForSingleSelectionAtIndex(index);\n    this.setTabindexAtIndex(index);\n\n    if (index !== numbers.UNSET_INDEX) {\n      this.adapter.addClassForElementIndex(index, selectedClassName);\n    }\n\n    this.selectedIndex = index;\n  };\n  /**\n   * Sets aria attribute for single selection at given index.\n   */\n\n\n  MDCListFoundation.prototype.setAriaForSingleSelectionAtIndex = function (index) {\n    // Detect the presence of aria-current and get the value only during list\n    // initialization when it is in unset state.\n    if (this.selectedIndex === numbers.UNSET_INDEX) {\n      this.ariaCurrentAttrValue = this.adapter.getAttributeForElementIndex(index, strings.ARIA_CURRENT);\n    }\n\n    var isAriaCurrent = this.ariaCurrentAttrValue !== null;\n    var ariaAttribute = isAriaCurrent ? strings.ARIA_CURRENT : strings.ARIA_SELECTED;\n\n    if (this.selectedIndex !== numbers.UNSET_INDEX) {\n      this.adapter.setAttributeForElementIndex(this.selectedIndex, ariaAttribute, 'false');\n    }\n\n    if (index !== numbers.UNSET_INDEX) {\n      var ariaAttributeValue = isAriaCurrent ? this.ariaCurrentAttrValue : 'true';\n      this.adapter.setAttributeForElementIndex(index, ariaAttribute, ariaAttributeValue);\n    }\n  };\n  /**\n   * Returns the attribute to use for indicating selection status.\n   */\n\n\n  MDCListFoundation.prototype.getSelectionAttribute = function () {\n    return this.useSelectedAttr ? strings.ARIA_SELECTED : strings.ARIA_CHECKED;\n  };\n  /**\n   * Toggles radio at give index. Radio doesn't change the checked state if it\n   * is already checked.\n   */\n\n\n  MDCListFoundation.prototype.setRadioAtIndex = function (index) {\n    var selectionAttribute = this.getSelectionAttribute();\n    this.adapter.setCheckedCheckboxOrRadioAtIndex(index, true);\n\n    if (this.selectedIndex !== numbers.UNSET_INDEX) {\n      this.adapter.setAttributeForElementIndex(this.selectedIndex, selectionAttribute, 'false');\n    }\n\n    this.adapter.setAttributeForElementIndex(index, selectionAttribute, 'true');\n    this.selectedIndex = index;\n  };\n\n  MDCListFoundation.prototype.setCheckboxAtIndex = function (index) {\n    var selectionAttribute = this.getSelectionAttribute();\n\n    for (var i = 0; i < this.adapter.getListItemCount(); i++) {\n      var isChecked = false;\n\n      if (index.indexOf(i) >= 0) {\n        isChecked = true;\n      }\n\n      this.adapter.setCheckedCheckboxOrRadioAtIndex(i, isChecked);\n      this.adapter.setAttributeForElementIndex(i, selectionAttribute, isChecked ? 'true' : 'false');\n    }\n\n    this.selectedIndex = index;\n  };\n\n  MDCListFoundation.prototype.setTabindexAtIndex = function (index) {\n    if (this.focusedItemIndex === numbers.UNSET_INDEX && index !== 0) {\n      // If some list item was selected set first list item's tabindex to -1.\n      // Generally, tabindex is set to 0 on first list item of list that has no\n      // preselected items.\n      this.adapter.setAttributeForElementIndex(0, 'tabindex', '-1');\n    } else if (this.focusedItemIndex >= 0 && this.focusedItemIndex !== index) {\n      this.adapter.setAttributeForElementIndex(this.focusedItemIndex, 'tabindex', '-1');\n    } // Set the previous selection's tabindex to -1. We need this because\n    // in selection menus that are not visible, programmatically setting an\n    // option will not change focus but will change where tabindex should be 0.\n\n\n    if (!(this.selectedIndex instanceof Array) && this.selectedIndex !== index) {\n      this.adapter.setAttributeForElementIndex(this.selectedIndex, 'tabindex', '-1');\n    }\n\n    if (index !== numbers.UNSET_INDEX) {\n      this.adapter.setAttributeForElementIndex(index, 'tabindex', '0');\n    }\n  };\n  /**\n   * @return Return true if it is single selectin list, checkbox list or radio\n   *     list.\n   */\n\n\n  MDCListFoundation.prototype.isSelectableList = function () {\n    return this.isSingleSelectionList || this.isCheckboxList || this.isRadioList;\n  };\n\n  MDCListFoundation.prototype.setTabindexToFirstSelectedOrFocusedItem = function () {\n    var targetIndex = this.getFirstSelectedOrFocusedItemIndex();\n    this.setTabindexAtIndex(targetIndex);\n  };\n\n  MDCListFoundation.prototype.getFirstSelectedOrFocusedItemIndex = function () {\n    // Action lists retain focus on the most recently focused item.\n    if (!this.isSelectableList()) {\n      return Math.max(this.focusedItemIndex, 0);\n    } // Single-selection lists focus the selected item.\n\n\n    if (typeof this.selectedIndex === 'number' && this.selectedIndex !== numbers.UNSET_INDEX) {\n      return this.selectedIndex;\n    } // Multiple-selection lists focus the first selected item.\n\n\n    if (isNumberArray(this.selectedIndex) && this.selectedIndex.length > 0) {\n      return this.selectedIndex.reduce(function (minIndex, currentIndex) {\n        return Math.min(minIndex, currentIndex);\n      });\n    } // Selection lists without a selection focus the first item.\n\n\n    return 0;\n  };\n\n  MDCListFoundation.prototype.isIndexValid = function (index) {\n    var _this = this;\n\n    if (index instanceof Array) {\n      if (!this.isCheckboxList) {\n        throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');\n      }\n\n      if (index.length === 0) {\n        return true;\n      } else {\n        return index.some(function (i) {\n          return _this.isIndexInRange(i);\n        });\n      }\n    } else if (typeof index === 'number') {\n      if (this.isCheckboxList) {\n        throw new Error(\"MDCListFoundation: Expected array of index for checkbox based list but got number: \" + index);\n      }\n\n      return this.isIndexInRange(index) || this.isSingleSelectionList && index === numbers.UNSET_INDEX;\n    } else {\n      return false;\n    }\n  };\n\n  MDCListFoundation.prototype.isIndexInRange = function (index) {\n    var listSize = this.adapter.getListItemCount();\n    return index >= 0 && index < listSize;\n  };\n  /**\n   * Sets selected index on user action, toggles checkbox / radio based on\n   * toggleCheckbox value. User interaction should not toggle list item(s) when\n   * disabled.\n   */\n\n\n  MDCListFoundation.prototype.setSelectedIndexOnAction = function (index, toggleCheckbox) {\n    if (toggleCheckbox === void 0) {\n      toggleCheckbox = true;\n    }\n\n    if (this.isCheckboxList) {\n      this.toggleCheckboxAtIndex(index, toggleCheckbox);\n    } else {\n      this.setSelectedIndex(index);\n    }\n  };\n\n  MDCListFoundation.prototype.toggleCheckboxAtIndex = function (index, toggleCheckbox) {\n    var selectionAttribute = this.getSelectionAttribute();\n    var isChecked = this.adapter.isCheckboxCheckedAtIndex(index);\n\n    if (toggleCheckbox) {\n      isChecked = !isChecked;\n      this.adapter.setCheckedCheckboxOrRadioAtIndex(index, isChecked);\n    }\n\n    this.adapter.setAttributeForElementIndex(index, selectionAttribute, isChecked ? 'true' : 'false'); // If none of the checkbox items are selected and selectedIndex is not\n    // initialized then provide a default value.\n\n    var selectedIndexes = this.selectedIndex === numbers.UNSET_INDEX ? [] : this.selectedIndex.slice();\n\n    if (isChecked) {\n      selectedIndexes.push(index);\n    } else {\n      selectedIndexes = selectedIndexes.filter(function (i) {\n        return i !== index;\n      });\n    }\n\n    this.selectedIndex = selectedIndexes;\n  };\n\n  MDCListFoundation.prototype.focusItemAtIndex = function (index) {\n    this.adapter.focusItemAtIndex(index);\n    this.focusedItemIndex = index;\n  };\n\n  MDCListFoundation.prototype.toggleAll = function (currentlySelectedIndexes) {\n    var count = this.adapter.getListItemCount(); // If all items are selected, deselect everything.\n\n    if (currentlySelectedIndexes.length === count) {\n      this.setCheckboxAtIndex([]);\n    } else {\n      // Otherwise select all enabled options.\n      var allIndexes = [];\n\n      for (var i = 0; i < count; i++) {\n        if (!this.adapter.listItemAtIndexHasClass(i, cssClasses.LIST_ITEM_DISABLED_CLASS) || currentlySelectedIndexes.indexOf(i) > -1) {\n          allIndexes.push(i);\n        }\n      }\n\n      this.setCheckboxAtIndex(allIndexes);\n    }\n  };\n  /**\n   * Given the next desired character from the user, adds it to the typeahead\n   * buffer. Then, attempts to find the next option matching the buffer. Wraps\n   * around if at the end of options.\n   *\n   * @param nextChar The next character to add to the prefix buffer.\n   * @param startingIndex The index from which to start matching. Only relevant\n   *     when starting a new match sequence. To start a new match sequence,\n   *     clear the buffer using `clearTypeaheadBuffer`, or wait for the buffer\n   *     to clear after a set interval defined in list foundation. Defaults to\n   *     the currently focused index.\n   * @return The index of the matched item, or -1 if no match.\n   */\n\n\n  MDCListFoundation.prototype.typeaheadMatchItem = function (nextChar, startingIndex, skipFocus) {\n    var _this = this;\n\n    if (skipFocus === void 0) {\n      skipFocus = false;\n    }\n\n    var opts = {\n      focusItemAtIndex: function (index) {\n        _this.focusItemAtIndex(index);\n      },\n      focusedItemIndex: startingIndex ? startingIndex : this.focusedItemIndex,\n      nextChar: nextChar,\n      sortedIndexByFirstChar: this.sortedIndexByFirstChar,\n      skipFocus: skipFocus,\n      isItemAtIndexDisabled: function (index) {\n        return _this.adapter.listItemAtIndexHasClass(index, cssClasses.LIST_ITEM_DISABLED_CLASS);\n      }\n    };\n    return typeahead.matchItem(opts, this.typeaheadState);\n  };\n  /**\n   * Initializes the MDCListTextAndIndex data structure by indexing the current\n   * list items by primary text.\n   *\n   * @return The primary texts of all the list items sorted by first character.\n   */\n\n\n  MDCListFoundation.prototype.typeaheadInitSortedIndex = function () {\n    return typeahead.initSortedIndex(this.adapter.getListItemCount(), this.adapter.getPrimaryTextAtIndex);\n  };\n  /**\n   * Clears the typeahead buffer.\n   */\n\n\n  MDCListFoundation.prototype.clearTypeaheadBuffer = function () {\n    typeahead.clearBuffer(this.typeaheadState);\n  };\n\n  return MDCListFoundation;\n}(MDCFoundation);\n\nexport { MDCListFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCListFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { normalizeKey } from '@material/dom/keyboard';\nimport { cssClasses, numbers, strings } from './constants';\nimport { preventDefaultEvent } from './events';\nimport * as typeahead from './typeahead';\nfunction isNumberArray(selectedIndex) {\n    return selectedIndex instanceof Array;\n}\nvar MDCListFoundation = /** @class */ (function (_super) {\n    __extends(MDCListFoundation, _super);\n    function MDCListFoundation(adapter) {\n        var _this = _super.call(this, __assign(__assign({}, MDCListFoundation.defaultAdapter), adapter)) || this;\n        _this.wrapFocus = false;\n        _this.isVertical = true;\n        _this.isSingleSelectionList = false;\n        _this.selectedIndex = numbers.UNSET_INDEX;\n        _this.focusedItemIndex = numbers.UNSET_INDEX;\n        _this.useActivatedClass = false;\n        _this.useSelectedAttr = false;\n        _this.ariaCurrentAttrValue = null;\n        _this.isCheckboxList = false;\n        _this.isRadioList = false;\n        _this.hasTypeahead = false;\n        // Transiently holds current typeahead prefix from user.\n        _this.typeaheadState = typeahead.initState();\n        _this.sortedIndexByFirstChar = new Map();\n        return _this;\n    }\n    Object.defineProperty(MDCListFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCListFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCListFoundation, \"numbers\", {\n        get: function () {\n            return numbers;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCListFoundation, \"defaultAdapter\", {\n        get: function () {\n            return {\n                addClassForElementIndex: function () { return undefined; },\n                focusItemAtIndex: function () { return undefined; },\n                getAttributeForElementIndex: function () { return null; },\n                getFocusedElementIndex: function () { return 0; },\n                getListItemCount: function () { return 0; },\n                hasCheckboxAtIndex: function () { return false; },\n                hasRadioAtIndex: function () { return false; },\n                isCheckboxCheckedAtIndex: function () { return false; },\n                isFocusInsideList: function () { return false; },\n                isRootFocused: function () { return false; },\n                listItemAtIndexHasClass: function () { return false; },\n                notifyAction: function () { return undefined; },\n                removeClassForElementIndex: function () { return undefined; },\n                setAttributeForElementIndex: function () { return undefined; },\n                setCheckedCheckboxOrRadioAtIndex: function () { return undefined; },\n                setTabIndexForListItemChildren: function () { return undefined; },\n                getPrimaryTextAtIndex: function () { return ''; },\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCListFoundation.prototype.layout = function () {\n        if (this.adapter.getListItemCount() === 0) {\n            return;\n        }\n        // TODO(b/172274142): consider all items when determining the list's type.\n        if (this.adapter.hasCheckboxAtIndex(0)) {\n            this.isCheckboxList = true;\n        }\n        else if (this.adapter.hasRadioAtIndex(0)) {\n            this.isRadioList = true;\n        }\n        else {\n            this.maybeInitializeSingleSelection();\n        }\n        if (this.hasTypeahead) {\n            this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();\n        }\n    };\n    /** Returns the index of the item that was last focused. */\n    MDCListFoundation.prototype.getFocusedItemIndex = function () {\n        return this.focusedItemIndex;\n    };\n    /** Toggles focus wrapping with keyboard navigation. */\n    MDCListFoundation.prototype.setWrapFocus = function (value) {\n        this.wrapFocus = value;\n    };\n    /**\n     * Toggles orientation direction for keyboard navigation (true for vertical,\n     * false for horizontal).\n     */\n    MDCListFoundation.prototype.setVerticalOrientation = function (value) {\n        this.isVertical = value;\n    };\n    /** Toggles single-selection behavior. */\n    MDCListFoundation.prototype.setSingleSelection = function (value) {\n        this.isSingleSelectionList = value;\n        if (value) {\n            this.maybeInitializeSingleSelection();\n            this.selectedIndex = this.getSelectedIndexFromDOM();\n        }\n    };\n    /**\n     * Automatically determines whether the list is single selection list. If so,\n     * initializes the internal state to match the selected item.\n     */\n    MDCListFoundation.prototype.maybeInitializeSingleSelection = function () {\n        var selectedItemIndex = this.getSelectedIndexFromDOM();\n        if (selectedItemIndex === numbers.UNSET_INDEX)\n            return;\n        var hasActivatedClass = this.adapter.listItemAtIndexHasClass(selectedItemIndex, cssClasses.LIST_ITEM_ACTIVATED_CLASS);\n        if (hasActivatedClass) {\n            this.setUseActivatedClass(true);\n        }\n        this.isSingleSelectionList = true;\n        this.selectedIndex = selectedItemIndex;\n    };\n    /** @return Index of the first selected item based on the DOM state. */\n    MDCListFoundation.prototype.getSelectedIndexFromDOM = function () {\n        var selectedIndex = numbers.UNSET_INDEX;\n        var listItemsCount = this.adapter.getListItemCount();\n        for (var i = 0; i < listItemsCount; i++) {\n            var hasSelectedClass = this.adapter.listItemAtIndexHasClass(i, cssClasses.LIST_ITEM_SELECTED_CLASS);\n            var hasActivatedClass = this.adapter.listItemAtIndexHasClass(i, cssClasses.LIST_ITEM_ACTIVATED_CLASS);\n            if (!(hasSelectedClass || hasActivatedClass)) {\n                continue;\n            }\n            selectedIndex = i;\n            break;\n        }\n        return selectedIndex;\n    };\n    /**\n     * Sets whether typeahead is enabled on the list.\n     * @param hasTypeahead Whether typeahead is enabled.\n     */\n    MDCListFoundation.prototype.setHasTypeahead = function (hasTypeahead) {\n        this.hasTypeahead = hasTypeahead;\n        if (hasTypeahead) {\n            this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();\n        }\n    };\n    /**\n     * @return Whether typeahead is currently matching a user-specified prefix.\n     */\n    MDCListFoundation.prototype.isTypeaheadInProgress = function () {\n        return this.hasTypeahead &&\n            typeahead.isTypingInProgress(this.typeaheadState);\n    };\n    /** Toggle use of the \"activated\" CSS class. */\n    MDCListFoundation.prototype.setUseActivatedClass = function (useActivated) {\n        this.useActivatedClass = useActivated;\n    };\n    /**\n     * Toggles use of the selected attribute (true for aria-selected, false for\n     * aria-checked).\n     */\n    MDCListFoundation.prototype.setUseSelectedAttribute = function (useSelected) {\n        this.useSelectedAttr = useSelected;\n    };\n    MDCListFoundation.prototype.getSelectedIndex = function () {\n        return this.selectedIndex;\n    };\n    MDCListFoundation.prototype.setSelectedIndex = function (index, _a) {\n        var _b = _a === void 0 ? {} : _a, forceUpdate = _b.forceUpdate;\n        if (!this.isIndexValid(index)) {\n            return;\n        }\n        if (this.isCheckboxList) {\n            this.setCheckboxAtIndex(index);\n        }\n        else if (this.isRadioList) {\n            this.setRadioAtIndex(index);\n        }\n        else {\n            this.setSingleSelectionAtIndex(index, { forceUpdate: forceUpdate });\n        }\n    };\n    /**\n     * Focus in handler for the list items.\n     */\n    MDCListFoundation.prototype.handleFocusIn = function (listItemIndex) {\n        if (listItemIndex >= 0) {\n            this.focusedItemIndex = listItemIndex;\n            this.adapter.setAttributeForElementIndex(listItemIndex, 'tabindex', '0');\n            this.adapter.setTabIndexForListItemChildren(listItemIndex, '0');\n        }\n    };\n    /**\n     * Focus out handler for the list items.\n     */\n    MDCListFoundation.prototype.handleFocusOut = function (listItemIndex) {\n        var _this = this;\n        if (listItemIndex >= 0) {\n            this.adapter.setAttributeForElementIndex(listItemIndex, 'tabindex', '-1');\n            this.adapter.setTabIndexForListItemChildren(listItemIndex, '-1');\n        }\n        /**\n         * Between Focusout & Focusin some browsers do not have focus on any\n         * element. Setting a delay to wait till the focus is moved to next element.\n         */\n        setTimeout(function () {\n            if (!_this.adapter.isFocusInsideList()) {\n                _this.setTabindexToFirstSelectedOrFocusedItem();\n            }\n        }, 0);\n    };\n    /**\n     * Key handler for the list.\n     */\n    MDCListFoundation.prototype.handleKeydown = function (event, isRootListItem, listItemIndex) {\n        var _this = this;\n        var isArrowLeft = normalizeKey(event) === 'ArrowLeft';\n        var isArrowUp = normalizeKey(event) === 'ArrowUp';\n        var isArrowRight = normalizeKey(event) === 'ArrowRight';\n        var isArrowDown = normalizeKey(event) === 'ArrowDown';\n        var isHome = normalizeKey(event) === 'Home';\n        var isEnd = normalizeKey(event) === 'End';\n        var isEnter = normalizeKey(event) === 'Enter';\n        var isSpace = normalizeKey(event) === 'Spacebar';\n        // Have to check both upper and lower case, because having caps lock on\n        // affects the value.\n        var isLetterA = event.key === 'A' || event.key === 'a';\n        if (this.adapter.isRootFocused()) {\n            if (isArrowUp || isEnd) {\n                event.preventDefault();\n                this.focusLastElement();\n            }\n            else if (isArrowDown || isHome) {\n                event.preventDefault();\n                this.focusFirstElement();\n            }\n            if (this.hasTypeahead) {\n                var handleKeydownOpts = {\n                    event: event,\n                    focusItemAtIndex: function (index) {\n                        _this.focusItemAtIndex(index);\n                    },\n                    focusedItemIndex: -1,\n                    isTargetListItem: isRootListItem,\n                    sortedIndexByFirstChar: this.sortedIndexByFirstChar,\n                    isItemAtIndexDisabled: function (index) {\n                        return _this.adapter.listItemAtIndexHasClass(index, cssClasses.LIST_ITEM_DISABLED_CLASS);\n                    },\n                };\n                typeahead.handleKeydown(handleKeydownOpts, this.typeaheadState);\n            }\n            return;\n        }\n        var currentIndex = this.adapter.getFocusedElementIndex();\n        if (currentIndex === -1) {\n            currentIndex = listItemIndex;\n            if (currentIndex < 0) {\n                // If this event doesn't have a mdc-list-item ancestor from the\n                // current list (not from a sublist), return early.\n                return;\n            }\n        }\n        if ((this.isVertical && isArrowDown) ||\n            (!this.isVertical && isArrowRight)) {\n            preventDefaultEvent(event);\n            this.focusNextElement(currentIndex);\n        }\n        else if ((this.isVertical && isArrowUp) || (!this.isVertical && isArrowLeft)) {\n            preventDefaultEvent(event);\n            this.focusPrevElement(currentIndex);\n        }\n        else if (isHome) {\n            preventDefaultEvent(event);\n            this.focusFirstElement();\n        }\n        else if (isEnd) {\n            preventDefaultEvent(event);\n            this.focusLastElement();\n        }\n        else if (isLetterA && event.ctrlKey && this.isCheckboxList) {\n            event.preventDefault();\n            this.toggleAll(this.selectedIndex === numbers.UNSET_INDEX ?\n                [] :\n                this.selectedIndex);\n        }\n        else if (isEnter || isSpace) {\n            if (isRootListItem) {\n                // Return early if enter key is pressed on anchor element which triggers\n                // synthetic MouseEvent event.\n                var target = event.target;\n                if (target && target.tagName === 'A' && isEnter) {\n                    return;\n                }\n                preventDefaultEvent(event);\n                if (this.adapter.listItemAtIndexHasClass(currentIndex, cssClasses.LIST_ITEM_DISABLED_CLASS)) {\n                    return;\n                }\n                if (!this.isTypeaheadInProgress()) {\n                    if (this.isSelectableList()) {\n                        this.setSelectedIndexOnAction(currentIndex);\n                    }\n                    this.adapter.notifyAction(currentIndex);\n                }\n            }\n        }\n        if (this.hasTypeahead) {\n            var handleKeydownOpts = {\n                event: event,\n                focusItemAtIndex: function (index) {\n                    _this.focusItemAtIndex(index);\n                },\n                focusedItemIndex: this.focusedItemIndex,\n                isTargetListItem: isRootListItem,\n                sortedIndexByFirstChar: this.sortedIndexByFirstChar,\n                isItemAtIndexDisabled: function (index) { return _this.adapter.listItemAtIndexHasClass(index, cssClasses.LIST_ITEM_DISABLED_CLASS); },\n            };\n            typeahead.handleKeydown(handleKeydownOpts, this.typeaheadState);\n        }\n    };\n    /**\n     * Click handler for the list.\n     */\n    MDCListFoundation.prototype.handleClick = function (index, toggleCheckbox) {\n        if (index === numbers.UNSET_INDEX) {\n            return;\n        }\n        if (this.adapter.listItemAtIndexHasClass(index, cssClasses.LIST_ITEM_DISABLED_CLASS)) {\n            return;\n        }\n        if (this.isSelectableList()) {\n            this.setSelectedIndexOnAction(index, toggleCheckbox);\n        }\n        this.adapter.notifyAction(index);\n    };\n    /**\n     * Focuses the next element on the list.\n     */\n    MDCListFoundation.prototype.focusNextElement = function (index) {\n        var count = this.adapter.getListItemCount();\n        var nextIndex = index + 1;\n        if (nextIndex >= count) {\n            if (this.wrapFocus) {\n                nextIndex = 0;\n            }\n            else {\n                // Return early because last item is already focused.\n                return index;\n            }\n        }\n        this.focusItemAtIndex(nextIndex);\n        return nextIndex;\n    };\n    /**\n     * Focuses the previous element on the list.\n     */\n    MDCListFoundation.prototype.focusPrevElement = function (index) {\n        var prevIndex = index - 1;\n        if (prevIndex < 0) {\n            if (this.wrapFocus) {\n                prevIndex = this.adapter.getListItemCount() - 1;\n            }\n            else {\n                // Return early because first item is already focused.\n                return index;\n            }\n        }\n        this.focusItemAtIndex(prevIndex);\n        return prevIndex;\n    };\n    MDCListFoundation.prototype.focusFirstElement = function () {\n        this.focusItemAtIndex(0);\n        return 0;\n    };\n    MDCListFoundation.prototype.focusLastElement = function () {\n        var lastIndex = this.adapter.getListItemCount() - 1;\n        this.focusItemAtIndex(lastIndex);\n        return lastIndex;\n    };\n    MDCListFoundation.prototype.focusInitialElement = function () {\n        var initialIndex = this.getFirstSelectedOrFocusedItemIndex();\n        this.focusItemAtIndex(initialIndex);\n        return initialIndex;\n    };\n    /**\n     * @param itemIndex Index of the list item\n     * @param isEnabled Sets the list item to enabled or disabled.\n     */\n    MDCListFoundation.prototype.setEnabled = function (itemIndex, isEnabled) {\n        if (!this.isIndexValid(itemIndex)) {\n            return;\n        }\n        if (isEnabled) {\n            this.adapter.removeClassForElementIndex(itemIndex, cssClasses.LIST_ITEM_DISABLED_CLASS);\n            this.adapter.setAttributeForElementIndex(itemIndex, strings.ARIA_DISABLED, 'false');\n        }\n        else {\n            this.adapter.addClassForElementIndex(itemIndex, cssClasses.LIST_ITEM_DISABLED_CLASS);\n            this.adapter.setAttributeForElementIndex(itemIndex, strings.ARIA_DISABLED, 'true');\n        }\n    };\n    MDCListFoundation.prototype.setSingleSelectionAtIndex = function (index, _a) {\n        var _b = _a === void 0 ? {} : _a, forceUpdate = _b.forceUpdate;\n        if (this.selectedIndex === index && !forceUpdate) {\n            return;\n        }\n        var selectedClassName = cssClasses.LIST_ITEM_SELECTED_CLASS;\n        if (this.useActivatedClass) {\n            selectedClassName = cssClasses.LIST_ITEM_ACTIVATED_CLASS;\n        }\n        if (this.selectedIndex !== numbers.UNSET_INDEX) {\n            this.adapter.removeClassForElementIndex(this.selectedIndex, selectedClassName);\n        }\n        this.setAriaForSingleSelectionAtIndex(index);\n        this.setTabindexAtIndex(index);\n        if (index !== numbers.UNSET_INDEX) {\n            this.adapter.addClassForElementIndex(index, selectedClassName);\n        }\n        this.selectedIndex = index;\n    };\n    /**\n     * Sets aria attribute for single selection at given index.\n     */\n    MDCListFoundation.prototype.setAriaForSingleSelectionAtIndex = function (index) {\n        // Detect the presence of aria-current and get the value only during list\n        // initialization when it is in unset state.\n        if (this.selectedIndex === numbers.UNSET_INDEX) {\n            this.ariaCurrentAttrValue =\n                this.adapter.getAttributeForElementIndex(index, strings.ARIA_CURRENT);\n        }\n        var isAriaCurrent = this.ariaCurrentAttrValue !== null;\n        var ariaAttribute = isAriaCurrent ? strings.ARIA_CURRENT : strings.ARIA_SELECTED;\n        if (this.selectedIndex !== numbers.UNSET_INDEX) {\n            this.adapter.setAttributeForElementIndex(this.selectedIndex, ariaAttribute, 'false');\n        }\n        if (index !== numbers.UNSET_INDEX) {\n            var ariaAttributeValue = isAriaCurrent ? this.ariaCurrentAttrValue : 'true';\n            this.adapter.setAttributeForElementIndex(index, ariaAttribute, ariaAttributeValue);\n        }\n    };\n    /**\n     * Returns the attribute to use for indicating selection status.\n     */\n    MDCListFoundation.prototype.getSelectionAttribute = function () {\n        return this.useSelectedAttr ? strings.ARIA_SELECTED : strings.ARIA_CHECKED;\n    };\n    /**\n     * Toggles radio at give index. Radio doesn't change the checked state if it\n     * is already checked.\n     */\n    MDCListFoundation.prototype.setRadioAtIndex = function (index) {\n        var selectionAttribute = this.getSelectionAttribute();\n        this.adapter.setCheckedCheckboxOrRadioAtIndex(index, true);\n        if (this.selectedIndex !== numbers.UNSET_INDEX) {\n            this.adapter.setAttributeForElementIndex(this.selectedIndex, selectionAttribute, 'false');\n        }\n        this.adapter.setAttributeForElementIndex(index, selectionAttribute, 'true');\n        this.selectedIndex = index;\n    };\n    MDCListFoundation.prototype.setCheckboxAtIndex = function (index) {\n        var selectionAttribute = this.getSelectionAttribute();\n        for (var i = 0; i < this.adapter.getListItemCount(); i++) {\n            var isChecked = false;\n            if (index.indexOf(i) >= 0) {\n                isChecked = true;\n            }\n            this.adapter.setCheckedCheckboxOrRadioAtIndex(i, isChecked);\n            this.adapter.setAttributeForElementIndex(i, selectionAttribute, isChecked ? 'true' : 'false');\n        }\n        this.selectedIndex = index;\n    };\n    MDCListFoundation.prototype.setTabindexAtIndex = function (index) {\n        if (this.focusedItemIndex === numbers.UNSET_INDEX && index !== 0) {\n            // If some list item was selected set first list item's tabindex to -1.\n            // Generally, tabindex is set to 0 on first list item of list that has no\n            // preselected items.\n            this.adapter.setAttributeForElementIndex(0, 'tabindex', '-1');\n        }\n        else if (this.focusedItemIndex >= 0 && this.focusedItemIndex !== index) {\n            this.adapter.setAttributeForElementIndex(this.focusedItemIndex, 'tabindex', '-1');\n        }\n        // Set the previous selection's tabindex to -1. We need this because\n        // in selection menus that are not visible, programmatically setting an\n        // option will not change focus but will change where tabindex should be 0.\n        if (!(this.selectedIndex instanceof Array) &&\n            this.selectedIndex !== index) {\n            this.adapter.setAttributeForElementIndex(this.selectedIndex, 'tabindex', '-1');\n        }\n        if (index !== numbers.UNSET_INDEX) {\n            this.adapter.setAttributeForElementIndex(index, 'tabindex', '0');\n        }\n    };\n    /**\n     * @return Return true if it is single selectin list, checkbox list or radio\n     *     list.\n     */\n    MDCListFoundation.prototype.isSelectableList = function () {\n        return this.isSingleSelectionList || this.isCheckboxList ||\n            this.isRadioList;\n    };\n    MDCListFoundation.prototype.setTabindexToFirstSelectedOrFocusedItem = function () {\n        var targetIndex = this.getFirstSelectedOrFocusedItemIndex();\n        this.setTabindexAtIndex(targetIndex);\n    };\n    MDCListFoundation.prototype.getFirstSelectedOrFocusedItemIndex = function () {\n        // Action lists retain focus on the most recently focused item.\n        if (!this.isSelectableList()) {\n            return Math.max(this.focusedItemIndex, 0);\n        }\n        // Single-selection lists focus the selected item.\n        if (typeof this.selectedIndex === 'number' &&\n            this.selectedIndex !== numbers.UNSET_INDEX) {\n            return this.selectedIndex;\n        }\n        // Multiple-selection lists focus the first selected item.\n        if (isNumberArray(this.selectedIndex) && this.selectedIndex.length > 0) {\n            return this.selectedIndex.reduce(function (minIndex, currentIndex) { return Math.min(minIndex, currentIndex); });\n        }\n        // Selection lists without a selection focus the first item.\n        return 0;\n    };\n    MDCListFoundation.prototype.isIndexValid = function (index) {\n        var _this = this;\n        if (index instanceof Array) {\n            if (!this.isCheckboxList) {\n                throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');\n            }\n            if (index.length === 0) {\n                return true;\n            }\n            else {\n                return index.some(function (i) { return _this.isIndexInRange(i); });\n            }\n        }\n        else if (typeof index === 'number') {\n            if (this.isCheckboxList) {\n                throw new Error(\"MDCListFoundation: Expected array of index for checkbox based list but got number: \" + index);\n            }\n            return this.isIndexInRange(index) ||\n                this.isSingleSelectionList && index === numbers.UNSET_INDEX;\n        }\n        else {\n            return false;\n        }\n    };\n    MDCListFoundation.prototype.isIndexInRange = function (index) {\n        var listSize = this.adapter.getListItemCount();\n        return index >= 0 && index < listSize;\n    };\n    /**\n     * Sets selected index on user action, toggles checkbox / radio based on\n     * toggleCheckbox value. User interaction should not toggle list item(s) when\n     * disabled.\n     */\n    MDCListFoundation.prototype.setSelectedIndexOnAction = function (index, toggleCheckbox) {\n        if (toggleCheckbox === void 0) { toggleCheckbox = true; }\n        if (this.isCheckboxList) {\n            this.toggleCheckboxAtIndex(index, toggleCheckbox);\n        }\n        else {\n            this.setSelectedIndex(index);\n        }\n    };\n    MDCListFoundation.prototype.toggleCheckboxAtIndex = function (index, toggleCheckbox) {\n        var selectionAttribute = this.getSelectionAttribute();\n        var isChecked = this.adapter.isCheckboxCheckedAtIndex(index);\n        if (toggleCheckbox) {\n            isChecked = !isChecked;\n            this.adapter.setCheckedCheckboxOrRadioAtIndex(index, isChecked);\n        }\n        this.adapter.setAttributeForElementIndex(index, selectionAttribute, isChecked ? 'true' : 'false');\n        // If none of the checkbox items are selected and selectedIndex is not\n        // initialized then provide a default value.\n        var selectedIndexes = this.selectedIndex === numbers.UNSET_INDEX ?\n            [] :\n            this.selectedIndex.slice();\n        if (isChecked) {\n            selectedIndexes.push(index);\n        }\n        else {\n            selectedIndexes = selectedIndexes.filter(function (i) { return i !== index; });\n        }\n        this.selectedIndex = selectedIndexes;\n    };\n    MDCListFoundation.prototype.focusItemAtIndex = function (index) {\n        this.adapter.focusItemAtIndex(index);\n        this.focusedItemIndex = index;\n    };\n    MDCListFoundation.prototype.toggleAll = function (currentlySelectedIndexes) {\n        var count = this.adapter.getListItemCount();\n        // If all items are selected, deselect everything.\n        if (currentlySelectedIndexes.length === count) {\n            this.setCheckboxAtIndex([]);\n        }\n        else {\n            // Otherwise select all enabled options.\n            var allIndexes = [];\n            for (var i = 0; i < count; i++) {\n                if (!this.adapter.listItemAtIndexHasClass(i, cssClasses.LIST_ITEM_DISABLED_CLASS) ||\n                    currentlySelectedIndexes.indexOf(i) > -1) {\n                    allIndexes.push(i);\n                }\n            }\n            this.setCheckboxAtIndex(allIndexes);\n        }\n    };\n    /**\n     * Given the next desired character from the user, adds it to the typeahead\n     * buffer. Then, attempts to find the next option matching the buffer. Wraps\n     * around if at the end of options.\n     *\n     * @param nextChar The next character to add to the prefix buffer.\n     * @param startingIndex The index from which to start matching. Only relevant\n     *     when starting a new match sequence. To start a new match sequence,\n     *     clear the buffer using `clearTypeaheadBuffer`, or wait for the buffer\n     *     to clear after a set interval defined in list foundation. Defaults to\n     *     the currently focused index.\n     * @return The index of the matched item, or -1 if no match.\n     */\n    MDCListFoundation.prototype.typeaheadMatchItem = function (nextChar, startingIndex, skipFocus) {\n        var _this = this;\n        if (skipFocus === void 0) { skipFocus = false; }\n        var opts = {\n            focusItemAtIndex: function (index) {\n                _this.focusItemAtIndex(index);\n            },\n            focusedItemIndex: startingIndex ? startingIndex : this.focusedItemIndex,\n            nextChar: nextChar,\n            sortedIndexByFirstChar: this.sortedIndexByFirstChar,\n            skipFocus: skipFocus,\n            isItemAtIndexDisabled: function (index) { return _this.adapter.listItemAtIndexHasClass(index, cssClasses.LIST_ITEM_DISABLED_CLASS); }\n        };\n        return typeahead.matchItem(opts, this.typeaheadState);\n    };\n    /**\n     * Initializes the MDCListTextAndIndex data structure by indexing the current\n     * list items by primary text.\n     *\n     * @return The primary texts of all the list items sorted by first character.\n     */\n    MDCListFoundation.prototype.typeaheadInitSortedIndex = function () {\n        return typeahead.initSortedIndex(this.adapter.getListItemCount(), this.adapter.getPrimaryTextAtIndex);\n    };\n    /**\n     * Clears the typeahead buffer.\n     */\n    MDCListFoundation.prototype.clearTypeaheadBuffer = function () {\n        typeahead.clearBuffer(this.typeaheadState);\n    };\n    return MDCListFoundation;\n}(MDCFoundation));\nexport { MDCListFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCListFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}