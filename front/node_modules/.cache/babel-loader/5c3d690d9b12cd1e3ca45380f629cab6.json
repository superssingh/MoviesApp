{"ast":null,"code":"var _jsxFileName = \"/Users/santoshsingh/Documents/WebDevelopment/ReactEcomApp/frontend/src/components/Pages/home.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport * as TagNames from \"../constants/constants\"; // import VideoPlayer from \"../common/videoPlayer\";\n// import MoviesList from \"../common/moviesList\";\n// import PaginationBar from \"../common/paginationBar\";\n// import { Paginate } from \"../common/js/paginate\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const [trending, setTrending] = useState([]); // const [Top, setTop] = useState([]);\n\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    async function fetchData(Loading, URL, {\n      signal\n    }) {\n      // You can await here\n      if (Loading) {\n        const {\n          data\n        } = await axios.get(URL);\n        setTrending(data.results);\n        setLoading(false);\n      }\n    }\n\n    fetchData(loading, TagNames.getURL(), abortController.signal);\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, []); // Or [] if effect doesn't need props or state\n\n  console.log(trending); // const handleVideo = async (id) => {\n  //   const { data } = await axios.get(TagNames.getVideoKey(id));\n  //   const videoLink = (await data.results[0]?.key)\n  //     ? TagNames.getVideoLink(data.results[0].key)\n  //     : \"\";\n  //   const video = videoLink ? true : false;\n  //   this.setState({ videoLink, video });\n  // };\n  // const handleVideoClose = (status) => {\n  //   this.setState({ video: status });\n  // };\n  // const handlePageChange = (currentPage) => {\n  //   console.log(currentPage);\n  //   this.setState({ currentPage });\n  // };\n  // const { results, videoLink, video, currentPage, pageSize } = this.state;\n  // const imagepath = TagNames.getImagePath();\n  // const movies = Paginate(results, currentPage, pageSize);\n  // const count = results.length;\n  // if (results.length === 0) {\n  //   return <h3>Movies not found.</h3>;\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"jkbPtPePtD2MSi2kWOhw7rorbK0=\");\n\n_c = Home;\nexport default Home; ///--------\n// class Home extends Component {\n//   state = {\n//     data: [],\n//     results: [],\n//     videoLink: \"\",\n//     video: false,\n//     transform: 0,\n//     currentPage: 1,\n//     pageSize: 4,\n//   };\n//   componentDidMount = async () => {\n//     const { data } = await axios.get(TagNames.getURL());\n//     console.log(data);\n//     const { results } = data.ecom;\n//     this.setState({ results });\n//   };\n//   componentWillUnmount = () => {\n//     window.removeEventListener(\"scroll\", this.handleScroll);\n//   };\n//   handleScroll = (event) => {\n//     let scrollTop = event.target.scrollingElement.scrollTop,\n//       itemTranslate = Math.min(0, scrollTop / 3 - 60);\n//     this.setState({ transform: itemTranslate });\n//   };\n//   handleVideo = async (id) => {\n//     const { data } = await axios.get(TagNames.getVideoKey(id));\n//     const videoLink = (await data.results[0]?.key)\n//       ? TagNames.getVideoLink(data.results[0].key)\n//       : \"\";\n//     const video = videoLink ? true : false;\n//     this.setState({ videoLink, video });\n//   };\n//   handleVideoClose = (status) => {\n//     this.setState({ video: status });\n//   };\n//   handlePageChange = (currentPage) => {\n//     console.log(currentPage);\n//     this.setState({ currentPage });\n//   };\n//   render() {\n//     const { results, videoLink, video, currentPage, pageSize } = this.state;\n//     const imagepath = TagNames.getImagePath();\n//     const movies = Paginate(results, currentPage, pageSize);\n//     const count = results.length;\n//     if (results.length === 0) {\n//       return <h3>Movies not found.</h3>;\n//     }\n//     return (\n//       <div className=\"container\">\n//         <div className=\"home\">\n//           <MoviesList\n//             moviesList={movies}\n//             count={count}\n//             imagePath={imagepath}\n//             getVideo={this.handleVideo}\n//           />\n//           <PaginationBar\n//             itemCount={count}\n//             pageSize={pageSize}\n//             currentPage={1}\n//             onPageChange={this.handlePageChange}\n//           />\n//           <VideoPlayer\n//             trailerLink={videoLink}\n//             status={video}\n//             handleVideoClose={this.handleVideoClose}\n//           />\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n// export default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/santoshsingh/Documents/WebDevelopment/ReactEcomApp/frontend/src/components/Pages/home.jsx"],"names":["React","useState","useEffect","axios","TagNames","Home","trending","setTrending","loading","setLoading","abortController","AbortController","fetchData","Loading","URL","signal","data","get","results","getURL","cleanup","abort","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,QAAZ,MAA0B,wBAA1B,C,CACA;AACA;AACA;AACA;;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC,CADiB,CAEjB;;AAEA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,eAAe,GAAG,IAAIC,eAAJ,EAAxB;;AAEA,mBAAeC,SAAf,CAAyBC,OAAzB,EAAkCC,GAAlC,EAAuC;AAAEC,MAAAA;AAAF,KAAvC,EAAmD;AACjD;AACA,UAAIF,OAAJ,EAAa;AACX,cAAM;AAAEG,UAAAA;AAAF,YAAW,MAAMb,KAAK,CAACc,GAAN,CAAUH,GAAV,CAAvB;AACAP,QAAAA,WAAW,CAACS,IAAI,CAACE,OAAN,CAAX;AACAT,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF;;AACDG,IAAAA,SAAS,CAACJ,OAAD,EAAUJ,QAAQ,CAACe,MAAT,EAAV,EAA6BT,eAAe,CAACK,MAA7C,CAAT;AACA,WAAO,SAASK,OAAT,GAAmB;AACxBV,MAAAA,eAAe,CAACW,KAAhB;AACD,KAFD;AAGD,GAfQ,EAeN,EAfM,CAAT,CANiB,CAqBT;;AAERC,EAAAA,OAAO,CAACC,GAAR,CAAYjB,QAAZ,EAvBiB,CAwBjB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD,CA7ED;;GAAMD,I;;KAAAA,I;AA+EN,eAAeA,IAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport * as TagNames from \"../constants/constants\";\n// import VideoPlayer from \"../common/videoPlayer\";\n// import MoviesList from \"../common/moviesList\";\n// import PaginationBar from \"../common/paginationBar\";\n// import { Paginate } from \"../common/js/paginate\";\n\nconst Home = () => {\n  const [trending, setTrending] = useState([]);\n  // const [Top, setTop] = useState([]);\n\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    async function fetchData(Loading, URL, { signal }) {\n      // You can await here\n      if (Loading) {\n        const { data } = await axios.get(URL);\n        setTrending(data.results);\n        setLoading(false);\n      }\n    }\n    fetchData(loading, TagNames.getURL(), abortController.signal);\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, []); // Or [] if effect doesn't need props or state\n\n  console.log(trending);\n  // const handleVideo = async (id) => {\n  //   const { data } = await axios.get(TagNames.getVideoKey(id));\n  //   const videoLink = (await data.results[0]?.key)\n  //     ? TagNames.getVideoLink(data.results[0].key)\n  //     : \"\";\n\n  //   const video = videoLink ? true : false;\n  //   this.setState({ videoLink, video });\n  // };\n\n  // const handleVideoClose = (status) => {\n  //   this.setState({ video: status });\n  // };\n\n  // const handlePageChange = (currentPage) => {\n  //   console.log(currentPage);\n  //   this.setState({ currentPage });\n  // };\n\n  // const { results, videoLink, video, currentPage, pageSize } = this.state;\n  // const imagepath = TagNames.getImagePath();\n  // const movies = Paginate(results, currentPage, pageSize);\n  // const count = results.length;\n\n  // if (results.length === 0) {\n  //   return <h3>Movies not found.</h3>;\n  // }\n\n  return (\n    <div className=\"container\">\n      <div className=\"home\">\n        {/* <MoviesList\n          moviesList={movies}\n          count={count}\n          imagePath={imagepath}\n          getVideo={this.handleVideo}\n        />\n\n        <PaginationBar\n          itemCount={count}\n          pageSize={pageSize}\n          currentPage={1}\n          onPageChange={this.handlePageChange}\n        />\n\n        <VideoPlayer\n          trailerLink={videoLink}\n          status={video}\n          handleVideoClose={this.handleVideoClose}\n        /> */}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n\n///--------\n// class Home extends Component {\n//   state = {\n//     data: [],\n//     results: [],\n//     videoLink: \"\",\n//     video: false,\n//     transform: 0,\n//     currentPage: 1,\n//     pageSize: 4,\n//   };\n\n//   componentDidMount = async () => {\n//     const { data } = await axios.get(TagNames.getURL());\n//     console.log(data);\n//     const { results } = data.ecom;\n\n//     this.setState({ results });\n//   };\n\n//   componentWillUnmount = () => {\n//     window.removeEventListener(\"scroll\", this.handleScroll);\n//   };\n\n//   handleScroll = (event) => {\n//     let scrollTop = event.target.scrollingElement.scrollTop,\n//       itemTranslate = Math.min(0, scrollTop / 3 - 60);\n//     this.setState({ transform: itemTranslate });\n//   };\n\n//   handleVideo = async (id) => {\n//     const { data } = await axios.get(TagNames.getVideoKey(id));\n//     const videoLink = (await data.results[0]?.key)\n//       ? TagNames.getVideoLink(data.results[0].key)\n//       : \"\";\n\n//     const video = videoLink ? true : false;\n//     this.setState({ videoLink, video });\n//   };\n\n//   handleVideoClose = (status) => {\n//     this.setState({ video: status });\n//   };\n\n//   handlePageChange = (currentPage) => {\n//     console.log(currentPage);\n//     this.setState({ currentPage });\n//   };\n\n//   render() {\n//     const { results, videoLink, video, currentPage, pageSize } = this.state;\n//     const imagepath = TagNames.getImagePath();\n//     const movies = Paginate(results, currentPage, pageSize);\n//     const count = results.length;\n\n//     if (results.length === 0) {\n//       return <h3>Movies not found.</h3>;\n//     }\n\n//     return (\n//       <div className=\"container\">\n//         <div className=\"home\">\n//           <MoviesList\n//             moviesList={movies}\n//             count={count}\n//             imagePath={imagepath}\n//             getVideo={this.handleVideo}\n//           />\n\n//           <PaginationBar\n//             itemCount={count}\n//             pageSize={pageSize}\n//             currentPage={1}\n//             onPageChange={this.handlePageChange}\n//           />\n\n//           <VideoPlayer\n//             trailerLink={videoLink}\n//             status={video}\n//             handleVideoClose={this.handleVideoClose}\n//           />\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Home;\n"]},"metadata":{},"sourceType":"module"}