{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { closest, matches } from '@material/dom/ponyfill';\nimport { cssClasses, deprecatedClassNameMap, evolutionAttribute, evolutionClassNameMap, numbers, strings } from './constants';\nimport { MDCListFoundation } from './foundation';\n\nvar MDCList =\n/** @class */\nfunction (_super) {\n  __extends(MDCList, _super);\n\n  function MDCList() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(MDCList.prototype, \"vertical\", {\n    set: function (value) {\n      this.foundation.setVerticalOrientation(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCList.prototype, \"listElements\", {\n    get: function () {\n      return Array.from(this.root.querySelectorAll(\".\" + this.classNameMap[cssClasses.LIST_ITEM_CLASS]));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCList.prototype, \"wrapFocus\", {\n    set: function (value) {\n      this.foundation.setWrapFocus(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCList.prototype, \"typeaheadInProgress\", {\n    /**\n     * @return Whether typeahead is currently matching a user-specified prefix.\n     */\n    get: function () {\n      return this.foundation.isTypeaheadInProgress();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCList.prototype, \"hasTypeahead\", {\n    /**\n     * Sets whether typeahead functionality is enabled on the list.\n     * @param hasTypeahead Whether typeahead is enabled.\n     */\n    set: function (hasTypeahead) {\n      this.foundation.setHasTypeahead(hasTypeahead);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCList.prototype, \"singleSelection\", {\n    set: function (isSingleSelectionList) {\n      this.foundation.setSingleSelection(isSingleSelectionList);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCList.prototype, \"selectedIndex\", {\n    get: function () {\n      return this.foundation.getSelectedIndex();\n    },\n    set: function (index) {\n      this.foundation.setSelectedIndex(index);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MDCList.attachTo = function (root) {\n    return new MDCList(root);\n  };\n\n  MDCList.prototype.initialSyncWithDOM = function () {\n    this.isEvolutionEnabled = evolutionAttribute in this.root.dataset;\n\n    if (this.isEvolutionEnabled) {\n      this.classNameMap = evolutionClassNameMap;\n    } else if (matches(this.root, strings.DEPRECATED_SELECTOR)) {\n      this.classNameMap = deprecatedClassNameMap;\n    } else {\n      this.classNameMap = Object.values(cssClasses).reduce(function (obj, className) {\n        obj[className] = className;\n        return obj;\n      }, {});\n    }\n\n    this.handleClick = this.handleClickEvent.bind(this);\n    this.handleKeydown = this.handleKeydownEvent.bind(this);\n    this.focusInEventListener = this.handleFocusInEvent.bind(this);\n    this.focusOutEventListener = this.handleFocusOutEvent.bind(this);\n    this.listen('keydown', this.handleKeydown);\n    this.listen('click', this.handleClick);\n    this.listen('focusin', this.focusInEventListener);\n    this.listen('focusout', this.focusOutEventListener);\n    this.layout();\n    this.initializeListType();\n    this.ensureFocusable();\n  };\n\n  MDCList.prototype.destroy = function () {\n    this.unlisten('keydown', this.handleKeydown);\n    this.unlisten('click', this.handleClick);\n    this.unlisten('focusin', this.focusInEventListener);\n    this.unlisten('focusout', this.focusOutEventListener);\n  };\n\n  MDCList.prototype.layout = function () {\n    var direction = this.root.getAttribute(strings.ARIA_ORIENTATION);\n    this.vertical = direction !== strings.ARIA_ORIENTATION_HORIZONTAL;\n    var itemSelector = \".\" + this.classNameMap[cssClasses.LIST_ITEM_CLASS] + \":not([tabindex])\";\n    var childSelector = strings.FOCUSABLE_CHILD_ELEMENTS; // List items need to have at least tabindex=-1 to be focusable.\n\n    var itemEls = this.root.querySelectorAll(itemSelector);\n\n    if (itemEls.length) {\n      Array.prototype.forEach.call(itemEls, function (el) {\n        el.setAttribute('tabindex', '-1');\n      });\n    } // Child button/a elements are not tabbable until the list item is focused.\n\n\n    var focusableChildEls = this.root.querySelectorAll(childSelector);\n\n    if (focusableChildEls.length) {\n      Array.prototype.forEach.call(focusableChildEls, function (el) {\n        el.setAttribute('tabindex', '-1');\n      });\n    }\n\n    if (this.isEvolutionEnabled) {\n      this.foundation.setUseSelectedAttribute(true);\n    }\n\n    this.foundation.layout();\n  };\n  /**\n   * Extracts the primary text from a list item.\n   * @param item The list item element.\n   * @return The primary text in the element.\n   */\n\n\n  MDCList.prototype.getPrimaryText = function (item) {\n    var _a;\n\n    var primaryText = item.querySelector(\".\" + this.classNameMap[cssClasses.LIST_ITEM_PRIMARY_TEXT_CLASS]);\n\n    if (this.isEvolutionEnabled || primaryText) {\n      return (_a = primaryText === null || primaryText === void 0 ? void 0 : primaryText.textContent) !== null && _a !== void 0 ? _a : '';\n    }\n\n    var singleLineText = item.querySelector(\".\" + this.classNameMap[cssClasses.LIST_ITEM_TEXT_CLASS]);\n    return singleLineText && singleLineText.textContent || '';\n  };\n  /**\n   * Initialize selectedIndex value based on pre-selected list items.\n   */\n\n\n  MDCList.prototype.initializeListType = function () {\n    var _this = this;\n\n    this.isInteractive = matches(this.root, strings.ARIA_INTERACTIVE_ROLES_SELECTOR);\n\n    if (this.isEvolutionEnabled && this.isInteractive) {\n      var selection = Array.from(this.root.querySelectorAll(strings.SELECTED_ITEM_SELECTOR), function (listItem) {\n        return _this.listElements.indexOf(listItem);\n      });\n\n      if (matches(this.root, strings.ARIA_MULTI_SELECTABLE_SELECTOR)) {\n        this.selectedIndex = selection;\n      } else if (selection.length > 0) {\n        this.selectedIndex = selection[0];\n      }\n\n      return;\n    }\n\n    var checkboxListItems = this.root.querySelectorAll(strings.ARIA_ROLE_CHECKBOX_SELECTOR);\n    var radioSelectedListItem = this.root.querySelector(strings.ARIA_CHECKED_RADIO_SELECTOR);\n\n    if (checkboxListItems.length) {\n      var preselectedItems = this.root.querySelectorAll(strings.ARIA_CHECKED_CHECKBOX_SELECTOR);\n      this.selectedIndex = Array.from(preselectedItems, function (listItem) {\n        return _this.listElements.indexOf(listItem);\n      });\n    } else if (radioSelectedListItem) {\n      this.selectedIndex = this.listElements.indexOf(radioSelectedListItem);\n    }\n  };\n  /**\n   * Updates the list item at itemIndex to the desired isEnabled state.\n   * @param itemIndex Index of the list item\n   * @param isEnabled Sets the list item to enabled or disabled.\n   */\n\n\n  MDCList.prototype.setEnabled = function (itemIndex, isEnabled) {\n    this.foundation.setEnabled(itemIndex, isEnabled);\n  };\n  /**\n   * Given the next desired character from the user, adds it to the typeahead\n   * buffer. Then, attempts to find the next option matching the buffer. Wraps\n   * around if at the end of options.\n   *\n   * @param nextChar The next character to add to the prefix buffer.\n   * @param startingIndex The index from which to start matching. Defaults to\n   *     the currently focused index.\n   * @return The index of the matched item.\n   */\n\n\n  MDCList.prototype.typeaheadMatchItem = function (nextChar, startingIndex) {\n    return this.foundation.typeaheadMatchItem(nextChar, startingIndex,\n    /** skipFocus */\n    true);\n  };\n\n  MDCList.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take\n    // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any\n    // methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = {\n      addClassForElementIndex: function (index, className) {\n        var element = _this.listElements[index];\n\n        if (element) {\n          element.classList.add(_this.classNameMap[className]);\n        }\n      },\n      focusItemAtIndex: function (index) {\n        var element = _this.listElements[index];\n\n        if (element) {\n          element.focus();\n        }\n      },\n      getAttributeForElementIndex: function (index, attr) {\n        return _this.listElements[index].getAttribute(attr);\n      },\n      getFocusedElementIndex: function () {\n        return _this.listElements.indexOf(document.activeElement);\n      },\n      getListItemCount: function () {\n        return _this.listElements.length;\n      },\n      getPrimaryTextAtIndex: function (index) {\n        return _this.getPrimaryText(_this.listElements[index]);\n      },\n      hasCheckboxAtIndex: function (index) {\n        var listItem = _this.listElements[index];\n        return !!listItem.querySelector(strings.CHECKBOX_SELECTOR);\n      },\n      hasRadioAtIndex: function (index) {\n        var listItem = _this.listElements[index];\n        return !!listItem.querySelector(strings.RADIO_SELECTOR);\n      },\n      isCheckboxCheckedAtIndex: function (index) {\n        var listItem = _this.listElements[index];\n        var toggleEl = listItem.querySelector(strings.CHECKBOX_SELECTOR);\n        return toggleEl.checked;\n      },\n      isFocusInsideList: function () {\n        return _this.root !== document.activeElement && _this.root.contains(document.activeElement);\n      },\n      isRootFocused: function () {\n        return document.activeElement === _this.root;\n      },\n      listItemAtIndexHasClass: function (index, className) {\n        return _this.listElements[index].classList.contains(_this.classNameMap[className]);\n      },\n      notifyAction: function (index) {\n        _this.emit(strings.ACTION_EVENT, {\n          index: index\n        },\n        /** shouldBubble */\n        true);\n      },\n      removeClassForElementIndex: function (index, className) {\n        var element = _this.listElements[index];\n\n        if (element) {\n          element.classList.remove(_this.classNameMap[className]);\n        }\n      },\n      setAttributeForElementIndex: function (index, attr, value) {\n        var element = _this.listElements[index];\n\n        if (element) {\n          element.setAttribute(attr, value);\n        }\n      },\n      setCheckedCheckboxOrRadioAtIndex: function (index, isChecked) {\n        var listItem = _this.listElements[index];\n        var toggleEl = listItem.querySelector(strings.CHECKBOX_RADIO_SELECTOR);\n        toggleEl.checked = isChecked;\n        var event = document.createEvent('Event');\n        event.initEvent('change', true, true);\n        toggleEl.dispatchEvent(event);\n      },\n      setTabIndexForListItemChildren: function (listItemIndex, tabIndexValue) {\n        var element = _this.listElements[listItemIndex];\n        var selector = strings.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX;\n        Array.prototype.forEach.call(element.querySelectorAll(selector), function (el) {\n          el.setAttribute('tabindex', tabIndexValue);\n        });\n      }\n    };\n    return new MDCListFoundation(adapter);\n  };\n  /**\n   * Ensures that at least one item is focusable if the list is interactive and\n   * doesn't specify a suitable tabindex.\n   */\n\n\n  MDCList.prototype.ensureFocusable = function () {\n    if (this.isEvolutionEnabled && this.isInteractive) {\n      if (!this.root.querySelector(\".\" + this.classNameMap[cssClasses.LIST_ITEM_CLASS] + \"[tabindex=\\\"0\\\"]\")) {\n        var index = this.initialFocusIndex();\n\n        if (index !== -1) {\n          this.listElements[index].tabIndex = 0;\n        }\n      }\n    }\n  };\n\n  MDCList.prototype.initialFocusIndex = function () {\n    if (this.selectedIndex instanceof Array && this.selectedIndex.length > 0) {\n      return this.selectedIndex[0];\n    }\n\n    if (typeof this.selectedIndex === 'number' && this.selectedIndex !== numbers.UNSET_INDEX) {\n      return this.selectedIndex;\n    }\n\n    var el = this.root.querySelector(\".\" + this.classNameMap[cssClasses.LIST_ITEM_CLASS] + \":not(.\" + this.classNameMap[cssClasses.LIST_ITEM_DISABLED_CLASS] + \")\");\n\n    if (el === null) {\n      return -1;\n    }\n\n    return this.getListItemIndex(el);\n  };\n  /**\n   * Used to figure out which list item this event is targetting. Or returns -1\n   * if there is no list item\n   */\n\n\n  MDCList.prototype.getListItemIndex = function (el) {\n    var nearestParent = closest(el, \".\" + this.classNameMap[cssClasses.LIST_ITEM_CLASS] + \", .\" + this.classNameMap[cssClasses.ROOT]); // Get the index of the element if it is a list item.\n\n    if (nearestParent && matches(nearestParent, \".\" + this.classNameMap[cssClasses.LIST_ITEM_CLASS])) {\n      return this.listElements.indexOf(nearestParent);\n    }\n\n    return -1;\n  };\n  /**\n   * Used to figure out which element was clicked before sending the event to\n   * the foundation.\n   */\n\n\n  MDCList.prototype.handleFocusInEvent = function (evt) {\n    var index = this.getListItemIndex(evt.target);\n    this.foundation.handleFocusIn(index);\n  };\n  /**\n   * Used to figure out which element was clicked before sending the event to\n   * the foundation.\n   */\n\n\n  MDCList.prototype.handleFocusOutEvent = function (evt) {\n    var index = this.getListItemIndex(evt.target);\n    this.foundation.handleFocusOut(index);\n  };\n  /**\n   * Used to figure out which element was focused when keydown event occurred\n   * before sending the event to the foundation.\n   */\n\n\n  MDCList.prototype.handleKeydownEvent = function (evt) {\n    var index = this.getListItemIndex(evt.target);\n    var target = evt.target;\n    this.foundation.handleKeydown(evt, target.classList.contains(this.classNameMap[cssClasses.LIST_ITEM_CLASS]), index);\n  };\n  /**\n   * Used to figure out which element was clicked before sending the event to\n   * the foundation.\n   */\n\n\n  MDCList.prototype.handleClickEvent = function (evt) {\n    var index = this.getListItemIndex(evt.target);\n    var target = evt.target; // Toggle the checkbox only if it's not the target of the event, or the\n    // checkbox will have 2 change events.\n\n    var toggleCheckbox = !matches(target, strings.CHECKBOX_RADIO_SELECTOR);\n    this.foundation.handleClick(index, toggleCheckbox);\n  };\n\n  return MDCList;\n}(MDCComponent);\n\nexport { MDCList };","map":{"version":3,"sources":["component.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { closest, matches } from '@material/dom/ponyfill';\nimport { cssClasses, deprecatedClassNameMap, evolutionAttribute, evolutionClassNameMap, numbers, strings } from './constants';\nimport { MDCListFoundation } from './foundation';\nvar MDCList = /** @class */ (function (_super) {\n    __extends(MDCList, _super);\n    function MDCList() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(MDCList.prototype, \"vertical\", {\n        set: function (value) {\n            this.foundation.setVerticalOrientation(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCList.prototype, \"listElements\", {\n        get: function () {\n            return Array.from(this.root.querySelectorAll(\".\" + this.classNameMap[cssClasses.LIST_ITEM_CLASS]));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCList.prototype, \"wrapFocus\", {\n        set: function (value) {\n            this.foundation.setWrapFocus(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCList.prototype, \"typeaheadInProgress\", {\n        /**\n         * @return Whether typeahead is currently matching a user-specified prefix.\n         */\n        get: function () {\n            return this.foundation.isTypeaheadInProgress();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCList.prototype, \"hasTypeahead\", {\n        /**\n         * Sets whether typeahead functionality is enabled on the list.\n         * @param hasTypeahead Whether typeahead is enabled.\n         */\n        set: function (hasTypeahead) {\n            this.foundation.setHasTypeahead(hasTypeahead);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCList.prototype, \"singleSelection\", {\n        set: function (isSingleSelectionList) {\n            this.foundation.setSingleSelection(isSingleSelectionList);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCList.prototype, \"selectedIndex\", {\n        get: function () {\n            return this.foundation.getSelectedIndex();\n        },\n        set: function (index) {\n            this.foundation.setSelectedIndex(index);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCList.attachTo = function (root) {\n        return new MDCList(root);\n    };\n    MDCList.prototype.initialSyncWithDOM = function () {\n        this.isEvolutionEnabled =\n            evolutionAttribute in this.root.dataset;\n        if (this.isEvolutionEnabled) {\n            this.classNameMap = evolutionClassNameMap;\n        }\n        else if (matches(this.root, strings.DEPRECATED_SELECTOR)) {\n            this.classNameMap = deprecatedClassNameMap;\n        }\n        else {\n            this.classNameMap =\n                Object.values(cssClasses)\n                    .reduce(function (obj, className) {\n                    obj[className] = className;\n                    return obj;\n                }, {});\n        }\n        this.handleClick = this.handleClickEvent.bind(this);\n        this.handleKeydown = this.handleKeydownEvent.bind(this);\n        this.focusInEventListener = this.handleFocusInEvent.bind(this);\n        this.focusOutEventListener = this.handleFocusOutEvent.bind(this);\n        this.listen('keydown', this.handleKeydown);\n        this.listen('click', this.handleClick);\n        this.listen('focusin', this.focusInEventListener);\n        this.listen('focusout', this.focusOutEventListener);\n        this.layout();\n        this.initializeListType();\n        this.ensureFocusable();\n    };\n    MDCList.prototype.destroy = function () {\n        this.unlisten('keydown', this.handleKeydown);\n        this.unlisten('click', this.handleClick);\n        this.unlisten('focusin', this.focusInEventListener);\n        this.unlisten('focusout', this.focusOutEventListener);\n    };\n    MDCList.prototype.layout = function () {\n        var direction = this.root.getAttribute(strings.ARIA_ORIENTATION);\n        this.vertical = direction !== strings.ARIA_ORIENTATION_HORIZONTAL;\n        var itemSelector = \".\" + this.classNameMap[cssClasses.LIST_ITEM_CLASS] + \":not([tabindex])\";\n        var childSelector = strings.FOCUSABLE_CHILD_ELEMENTS;\n        // List items need to have at least tabindex=-1 to be focusable.\n        var itemEls = this.root.querySelectorAll(itemSelector);\n        if (itemEls.length) {\n            Array.prototype.forEach.call(itemEls, function (el) {\n                el.setAttribute('tabindex', '-1');\n            });\n        }\n        // Child button/a elements are not tabbable until the list item is focused.\n        var focusableChildEls = this.root.querySelectorAll(childSelector);\n        if (focusableChildEls.length) {\n            Array.prototype.forEach.call(focusableChildEls, function (el) {\n                el.setAttribute('tabindex', '-1');\n            });\n        }\n        if (this.isEvolutionEnabled) {\n            this.foundation.setUseSelectedAttribute(true);\n        }\n        this.foundation.layout();\n    };\n    /**\n     * Extracts the primary text from a list item.\n     * @param item The list item element.\n     * @return The primary text in the element.\n     */\n    MDCList.prototype.getPrimaryText = function (item) {\n        var _a;\n        var primaryText = item.querySelector(\".\" + this.classNameMap[cssClasses.LIST_ITEM_PRIMARY_TEXT_CLASS]);\n        if (this.isEvolutionEnabled || primaryText) {\n            return (_a = primaryText === null || primaryText === void 0 ? void 0 : primaryText.textContent) !== null && _a !== void 0 ? _a : '';\n        }\n        var singleLineText = item.querySelector(\".\" + this.classNameMap[cssClasses.LIST_ITEM_TEXT_CLASS]);\n        return (singleLineText && singleLineText.textContent) || '';\n    };\n    /**\n     * Initialize selectedIndex value based on pre-selected list items.\n     */\n    MDCList.prototype.initializeListType = function () {\n        var _this = this;\n        this.isInteractive =\n            matches(this.root, strings.ARIA_INTERACTIVE_ROLES_SELECTOR);\n        if (this.isEvolutionEnabled && this.isInteractive) {\n            var selection = Array.from(this.root.querySelectorAll(strings.SELECTED_ITEM_SELECTOR), function (listItem) { return _this.listElements.indexOf(listItem); });\n            if (matches(this.root, strings.ARIA_MULTI_SELECTABLE_SELECTOR)) {\n                this.selectedIndex = selection;\n            }\n            else if (selection.length > 0) {\n                this.selectedIndex = selection[0];\n            }\n            return;\n        }\n        var checkboxListItems = this.root.querySelectorAll(strings.ARIA_ROLE_CHECKBOX_SELECTOR);\n        var radioSelectedListItem = this.root.querySelector(strings.ARIA_CHECKED_RADIO_SELECTOR);\n        if (checkboxListItems.length) {\n            var preselectedItems = this.root.querySelectorAll(strings.ARIA_CHECKED_CHECKBOX_SELECTOR);\n            this.selectedIndex = Array.from(preselectedItems, function (listItem) { return _this.listElements.indexOf(listItem); });\n        }\n        else if (radioSelectedListItem) {\n            this.selectedIndex = this.listElements.indexOf(radioSelectedListItem);\n        }\n    };\n    /**\n     * Updates the list item at itemIndex to the desired isEnabled state.\n     * @param itemIndex Index of the list item\n     * @param isEnabled Sets the list item to enabled or disabled.\n     */\n    MDCList.prototype.setEnabled = function (itemIndex, isEnabled) {\n        this.foundation.setEnabled(itemIndex, isEnabled);\n    };\n    /**\n     * Given the next desired character from the user, adds it to the typeahead\n     * buffer. Then, attempts to find the next option matching the buffer. Wraps\n     * around if at the end of options.\n     *\n     * @param nextChar The next character to add to the prefix buffer.\n     * @param startingIndex The index from which to start matching. Defaults to\n     *     the currently focused index.\n     * @return The index of the matched item.\n     */\n    MDCList.prototype.typeaheadMatchItem = function (nextChar, startingIndex) {\n        return this.foundation.typeaheadMatchItem(nextChar, startingIndex, /** skipFocus */ true);\n    };\n    MDCList.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take\n        // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any\n        // methods, we need a separate, strongly typed adapter variable.\n        var adapter = {\n            addClassForElementIndex: function (index, className) {\n                var element = _this.listElements[index];\n                if (element) {\n                    element.classList.add(_this.classNameMap[className]);\n                }\n            },\n            focusItemAtIndex: function (index) {\n                var element = _this.listElements[index];\n                if (element) {\n                    element.focus();\n                }\n            },\n            getAttributeForElementIndex: function (index, attr) {\n                return _this.listElements[index].getAttribute(attr);\n            },\n            getFocusedElementIndex: function () {\n                return _this.listElements.indexOf(document.activeElement);\n            },\n            getListItemCount: function () { return _this.listElements.length; },\n            getPrimaryTextAtIndex: function (index) {\n                return _this.getPrimaryText(_this.listElements[index]);\n            },\n            hasCheckboxAtIndex: function (index) {\n                var listItem = _this.listElements[index];\n                return !!listItem.querySelector(strings.CHECKBOX_SELECTOR);\n            },\n            hasRadioAtIndex: function (index) {\n                var listItem = _this.listElements[index];\n                return !!listItem.querySelector(strings.RADIO_SELECTOR);\n            },\n            isCheckboxCheckedAtIndex: function (index) {\n                var listItem = _this.listElements[index];\n                var toggleEl = listItem.querySelector(strings.CHECKBOX_SELECTOR);\n                return toggleEl.checked;\n            },\n            isFocusInsideList: function () {\n                return _this.root !== document.activeElement &&\n                    _this.root.contains(document.activeElement);\n            },\n            isRootFocused: function () { return document.activeElement === _this.root; },\n            listItemAtIndexHasClass: function (index, className) {\n                return _this.listElements[index].classList.contains(_this.classNameMap[className]);\n            },\n            notifyAction: function (index) {\n                _this.emit(strings.ACTION_EVENT, { index: index }, /** shouldBubble */ true);\n            },\n            removeClassForElementIndex: function (index, className) {\n                var element = _this.listElements[index];\n                if (element) {\n                    element.classList.remove(_this.classNameMap[className]);\n                }\n            },\n            setAttributeForElementIndex: function (index, attr, value) {\n                var element = _this.listElements[index];\n                if (element) {\n                    element.setAttribute(attr, value);\n                }\n            },\n            setCheckedCheckboxOrRadioAtIndex: function (index, isChecked) {\n                var listItem = _this.listElements[index];\n                var toggleEl = listItem.querySelector(strings.CHECKBOX_RADIO_SELECTOR);\n                toggleEl.checked = isChecked;\n                var event = document.createEvent('Event');\n                event.initEvent('change', true, true);\n                toggleEl.dispatchEvent(event);\n            },\n            setTabIndexForListItemChildren: function (listItemIndex, tabIndexValue) {\n                var element = _this.listElements[listItemIndex];\n                var selector = strings.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX;\n                Array.prototype.forEach.call(element.querySelectorAll(selector), function (el) {\n                    el.setAttribute('tabindex', tabIndexValue);\n                });\n            },\n        };\n        return new MDCListFoundation(adapter);\n    };\n    /**\n     * Ensures that at least one item is focusable if the list is interactive and\n     * doesn't specify a suitable tabindex.\n     */\n    MDCList.prototype.ensureFocusable = function () {\n        if (this.isEvolutionEnabled && this.isInteractive) {\n            if (!this.root.querySelector(\".\" + this.classNameMap[cssClasses.LIST_ITEM_CLASS] + \"[tabindex=\\\"0\\\"]\")) {\n                var index = this.initialFocusIndex();\n                if (index !== -1) {\n                    this.listElements[index].tabIndex = 0;\n                }\n            }\n        }\n    };\n    MDCList.prototype.initialFocusIndex = function () {\n        if (this.selectedIndex instanceof Array && this.selectedIndex.length > 0) {\n            return this.selectedIndex[0];\n        }\n        if (typeof this.selectedIndex === 'number' &&\n            this.selectedIndex !== numbers.UNSET_INDEX) {\n            return this.selectedIndex;\n        }\n        var el = this.root.querySelector(\".\" + this.classNameMap[cssClasses.LIST_ITEM_CLASS] + \":not(.\" + this.classNameMap[cssClasses.LIST_ITEM_DISABLED_CLASS] + \")\");\n        if (el === null) {\n            return -1;\n        }\n        return this.getListItemIndex(el);\n    };\n    /**\n     * Used to figure out which list item this event is targetting. Or returns -1\n     * if there is no list item\n     */\n    MDCList.prototype.getListItemIndex = function (el) {\n        var nearestParent = closest(el, \".\" + this.classNameMap[cssClasses.LIST_ITEM_CLASS] + \", .\" + this.classNameMap[cssClasses.ROOT]);\n        // Get the index of the element if it is a list item.\n        if (nearestParent &&\n            matches(nearestParent, \".\" + this.classNameMap[cssClasses.LIST_ITEM_CLASS])) {\n            return this.listElements.indexOf(nearestParent);\n        }\n        return -1;\n    };\n    /**\n     * Used to figure out which element was clicked before sending the event to\n     * the foundation.\n     */\n    MDCList.prototype.handleFocusInEvent = function (evt) {\n        var index = this.getListItemIndex(evt.target);\n        this.foundation.handleFocusIn(index);\n    };\n    /**\n     * Used to figure out which element was clicked before sending the event to\n     * the foundation.\n     */\n    MDCList.prototype.handleFocusOutEvent = function (evt) {\n        var index = this.getListItemIndex(evt.target);\n        this.foundation.handleFocusOut(index);\n    };\n    /**\n     * Used to figure out which element was focused when keydown event occurred\n     * before sending the event to the foundation.\n     */\n    MDCList.prototype.handleKeydownEvent = function (evt) {\n        var index = this.getListItemIndex(evt.target);\n        var target = evt.target;\n        this.foundation.handleKeydown(evt, target.classList.contains(this.classNameMap[cssClasses.LIST_ITEM_CLASS]), index);\n    };\n    /**\n     * Used to figure out which element was clicked before sending the event to\n     * the foundation.\n     */\n    MDCList.prototype.handleClickEvent = function (evt) {\n        var index = this.getListItemIndex(evt.target);\n        var target = evt.target;\n        // Toggle the checkbox only if it's not the target of the event, or the\n        // checkbox will have 2 change events.\n        var toggleCheckbox = !matches(target, strings.CHECKBOX_RADIO_SELECTOR);\n        this.foundation.handleClick(index, toggleCheckbox);\n    };\n    return MDCList;\n}(MDCComponent));\nexport { MDCList };\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}